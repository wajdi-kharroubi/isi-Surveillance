from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from database import get_db
from models import GenerationRequest, GenerationResponse
from models.models import Affectation, Examen
from algorithms.optimizer_v1 import SurveillanceOptimizer
from algorithms.optimizer_v2 import SurveillanceOptimizerV2
from algorithms.optimizer_v3 import SurveillanceOptimizerV3
import logging

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/generation", tags=["G√©n√©ration"])


@router.post("/generer-v1", response_model=GenerationResponse)
def generer_planning_v1(request: GenerationRequest, db: Session = Depends(get_db)):
    """
    G√©n√®re automatiquement le planning avec l'algorithme V1 (Charge √©gale par grade).
    
    ALGORITHME V1 - QUOTA FIXE PAR GRADE:
    ====================================
    
    Caract√©ristiques:
    - Quotas FIXES par grade (tous les enseignants d'un grade font le m√™me nombre de s√©ances)
    - Groupe les examens par s√©ance (date + cr√©neau horaire + semestre + session)
    - Les enseignants affect√©s couvrent TOUS les examens de la s√©ance
    
    Prend en compte:
    - Les contraintes de disponibilit√© (v≈ìux)
    - Le nombre minimum de surveillants par s√©ance
    - L'√©quit√© stricte selon les grades (quota fixe)
    - √âquilibrage de la charge entre enseignants
    
    Param√®tres:
        - min_surveillants_par_salle: Nombre minimum de surveillants par examen (d√©faut: 2)
        - allow_single_surveillant: Autoriser le fallback √† 1 surveillant si n√©cessaire
    """
    try:
        optimizer = SurveillanceOptimizer(db)
        
        success, nb_affectations, temps_exec, messages, scores = optimizer.generer_planning_optimise(
            min_surveillants_par_examen=request.min_surveillants_par_salle,
            allow_fallback=request.allow_single_surveillant,
            respecter_voeux=True,
            equilibrer_temporel=True
        )
        
        if success:
            # Calculer le nombre de surveillances uniques (comme dans le dashboard)
            from sqlalchemy import func, distinct
            nb_surveillances_uniques = db.query(
                func.count(distinct(func.concat(
                    Affectation.enseignant_id, '-',
                    func.date(Examen.dateExam), '-',
                    Examen.h_debut
                )))
            ).join(Examen, Affectation.examen_id == Examen.id).scalar() or 0
            
            # Ajouter les scores aux messages
            messages_avec_scores = messages + [
                "\nüìä === SCORES V1 (Quota Fixe) ===",
                f"   ‚Ä¢ Score global: {scores.get('score_global', 0):.1f}%",
                f"   ‚Ä¢ Respect des v≈ìux: {scores.get('respect_voeux', 0):.1f}%",
                f"   ‚Ä¢ √âquilibre global: {scores.get('equilibre_global', 0):.1f}%",
                f"   ‚Ä¢ Quotas respect√©s: {scores.get('quota_respecte', 0):.1f}%"
            ]
            
            return GenerationResponse(
                success=True,
                message=f"‚úÖ Planning V1 g√©n√©r√© avec succ√®s en {temps_exec:.2f}s - {nb_surveillances_uniques} affectations cr√©√©es - Score: {scores.get('score_global', 0):.1f}%",
                nb_affectations=nb_surveillances_uniques,
                temps_generation=temps_exec,
                warnings=messages_avec_scores
            )
        else:
            return GenerationResponse(
                success=False,
                message="‚ùå √âchec de la g√©n√©ration du planning V1",
                nb_affectations=0,
                temps_generation=temps_exec,
                warnings=messages
            )
    
    except Exception as e:
        logger.error(f"Erreur lors de la g√©n√©ration V1: {str(e)}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Erreur: {str(e)}")


@router.post("/generer-v2", response_model=GenerationResponse)
def generer_planning_v2(request: GenerationRequest, db: Session = Depends(get_db)):
    """
    G√©n√®re automatiquement le planning avec l'algorithme d'optimisation V2.0 avanc√©.
    
    NOUVELLES FONCTIONNALIT√âS V2:
    =============================
    
    1. R√àGLES DE BASE (Contraintes fortes):
       ‚Ä¢ Charge obligatoire par grade (quota minimal)
       ‚Ä¢ Responsable d'examen DOIT √™tre pr√©sent
       ‚Ä¢ Non-conflit horaire garanti
       ‚Ä¢ Nombre minimal d'enseignants par cr√©neau
       ‚Ä¢ Fallback: Au moins 1 enseignant par examen
    
    2. R√àGLES DE PR√âF√âRENCE (Flexibles):
       ‚Ä¢ V≈ìux et disponibilit√©s des enseignants
       ‚Ä¢ √âquilibre temporel (√©viter toujours m√™mes cr√©neaux)
       ‚Ä¢ √âquilibre global de charge
    
    3. PRIORIT√â DES CONTRAINTES:
       1. Pr√©sence du responsable d'examen
       2. Nombre minimal par examen
       3. Quota obligatoire par grade
       4. Disponibilit√©s et v≈ìux
       5. √âquilibre global
    
    4. SCORE D'OPTIMISATION:
       ‚Ä¢ √âvaluation multi-crit√®res de la solution
       ‚Ä¢ Maximisation de la satisfaction globale
       ‚Ä¢ Rapport d√©taill√© des scores
    
    Param√®tres:
        - min_surveillants_par_salle: Nombre minimum de surveillants par examen (d√©faut: 2)
        - allow_single_surveillant: Autoriser le fallback √† 1 surveillant si n√©cessaire
    
    Retour:
        - success: Statut de la g√©n√©ration
        - nb_affectations: Nombre total d'affectations cr√©√©es
        - temps_generation: Temps d'ex√©cution en secondes
        - warnings: Liste des avertissements et informations
        - scores: Scores d'optimisation de la solution
    """
    try:
        optimizer = SurveillanceOptimizerV2(db)
        
        success, nb_affectations, temps_exec, messages, scores = optimizer.generer_planning_optimise(
            min_surveillants_par_examen=request.min_surveillants_par_salle,
            allow_fallback=request.allow_single_surveillant,
            respecter_voeux=True,
            equilibrer_temporel=True
        )
        
        if success:
            # Calculer le nombre de surveillances uniques (comme dans le dashboard)
            from sqlalchemy import func, distinct
            nb_surveillances_uniques = db.query(
                func.count(distinct(func.concat(
                    Affectation.enseignant_id, '-',
                    func.date(Examen.dateExam), '-',
                    Examen.h_debut
                )))
            ).join(Examen, Affectation.examen_id == Examen.id).scalar() or 0
            
            # Ajouter les scores aux messages
            messages_avec_scores = messages + [
                "\nüéØ === SCORES D'OPTIMISATION ===",
                f"   ‚Ä¢ Score global: {scores.get('score_global', 0):.1f}%",
                f"   ‚Ä¢ Respect des v≈ìux: {scores.get('respect_voeux', 0):.1f}%",
                f"   ‚Ä¢ √âquilibre global: {scores.get('equilibre_global', 0):.1f}%",
                f"   ‚Ä¢ Quotas respect√©s: {scores.get('quota_respecte', 0):.1f}%"
            ]
            
            return GenerationResponse(
                success=True,
                message=f"‚úÖ Planning V2 g√©n√©r√© avec succ√®s en {temps_exec:.2f}s - {nb_surveillances_uniques} affectations cr√©√©es - Score: {scores.get('score_global', 0):.1f}%",
                nb_affectations=nb_surveillances_uniques,
                temps_generation=temps_exec,
                warnings=messages_avec_scores
            )
        else:
            return GenerationResponse(
                success=False,
                message="‚ùå √âchec de la g√©n√©ration du planning V2",
                nb_affectations=0,
                temps_generation=temps_exec,
                warnings=messages
            )
    
    except Exception as e:
        logger.error(f"Erreur lors de la g√©n√©ration V2: {str(e)}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Erreur: {str(e)}")


@router.post("/generer-v3", response_model=GenerationResponse)
def generer_planning_v3(request: GenerationRequest, db: Session = Depends(get_db)):
    """
    G√©n√®re automatiquement le planning avec l'algorithme d'optimisation V3.0 avanc√©.
    
    NOUVELLES FONCTIONNALIT√âS V3:
    =============================
    
    1. R√àGLES DE BASE (Contraintes fortes):
       ‚Ä¢ Quota MAXIMUM strict par grade (pas de d√©passement)
       ‚Ä¢ Responsable d'examen DOIT √™tre pr√©sent
       ‚Ä¢ Non-conflit horaire garanti
       ‚Ä¢ Nombre minimal d'enseignants par cr√©neau
       ‚Ä¢ Mode adaptatif avec fallback intelligent
    
    2. R√àGLES DE PR√âF√âRENCE (Flexibles):
       ‚Ä¢ V≈ìux et disponibilit√©s des enseignants
       ‚Ä¢ √âquilibre temporel (√©viter toujours m√™mes cr√©neaux)
       ‚Ä¢ √âquilibre global de charge
    
    3. PRIORIT√â DES CONTRAINTES:
       1. Pr√©sence du responsable d'examen
       2. Nombre minimal par examen
       3. Quota MAXIMUM strict par grade (ne jamais d√©passer)
       4. Disponibilit√©s et v≈ìux (pr√©f√©rence)
       5. √âquilibre global
    
    4. SCORE D'OPTIMISATION:
       ‚Ä¢ √âvaluation multi-crit√®res de la solution
       ‚Ä¢ Maximisation de la satisfaction globale
       ‚Ä¢ Rapport d√©taill√© des scores
    
    Param√®tres:
        - min_surveillants_par_salle: Nombre minimum de surveillants par examen (d√©faut: 2)
        - allow_single_surveillant: Autoriser le fallback √† 1 surveillant si n√©cessaire
        - max_time_in_seconds: Temps maximum de r√©solution en secondes (d√©faut: 900 = 15 min, range: 10-3600)
        - relative_gap_limit: Gap relatif accept√© pour arr√™ter l'optimisation (d√©faut: 0.01 = 1%, range: 0.0-1.0)
    
    Retour:
        - success: Statut de la g√©n√©ration
        - nb_affectations: Nombre total d'affectations cr√©√©es
        - temps_generation: Temps d'ex√©cution en secondes
        - warnings: Liste des avertissements et informations
        - scores: Scores d'optimisation de la solution
    """
    try:
        optimizer = SurveillanceOptimizerV3(db)
        
        success, nb_affectations, temps_exec, messages, scores = optimizer.generer_planning_optimise(
            min_surveillants_par_examen=request.min_surveillants_par_salle,
            allow_fallback=request.allow_single_surveillant,
            respecter_voeux=True,
            equilibrer_temporel=True,
            activer_regroupement_temporel=True,  # ‚úÖ Activ√© par d√©faut pour le confort enseignants
            max_time_in_seconds=request.max_time_in_seconds,
            relative_gap_limit=request.relative_gap_limit
        )
        
        if success:
            # Calculer le nombre de surveillances uniques (comme dans le dashboard)
            from sqlalchemy import func, distinct
            nb_surveillances_uniques = db.query(
                func.count(distinct(func.concat(
                    Affectation.enseignant_id, '-',
                    func.date(Examen.dateExam), '-',
                    Examen.h_debut
                )))
            ).join(Examen, Affectation.examen_id == Examen.id).scalar() or 0
            
            # Ajouter les scores aux messages
            messages_avec_scores = messages + [
                "\nüéØ === SCORES D'OPTIMISATION V3 ===",
                f"   ‚Ä¢ Score global: {scores.get('score_global', 0):.1f}%",
                f"   ‚Ä¢ Respect des v≈ìux: {scores.get('respect_voeux', 0):.1f}%",
                f"   ‚Ä¢ √âquilibre global: {scores.get('equilibre_global', 0):.1f}%",
                f"   ‚Ä¢ Quotas respect√©s: {scores.get('quota_respecte', 0):.1f}%"
            ]
            
            return GenerationResponse(
                success=True,
                message=f"‚úÖ Planning V3 g√©n√©r√© avec succ√®s en {temps_exec:.2f}s - {nb_surveillances_uniques} affectations cr√©√©es - Score: {scores.get('score_global', 0):.1f}%",
                nb_affectations=nb_surveillances_uniques,
                temps_generation=temps_exec,
                warnings=messages_avec_scores
            )
        else:
            return GenerationResponse(
                success=False,
                message="‚ùå √âchec de la g√©n√©ration du planning V3",
                nb_affectations=0,
                temps_generation=temps_exec,
                warnings=messages
            )
    
    except Exception as e:
        logger.error(f"Erreur lors de la g√©n√©ration V3: {str(e)}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Erreur: {str(e)}")


@router.delete("/reinitialiser")
def reinitialiser_planning(db: Session = Depends(get_db)):
    """Supprime toutes les affectations actuelles"""
    from models.models import Affectation
    
    try:
        count = db.query(Affectation).delete()
        db.commit()
        
        return {
            "success": True,
            "message": f"{count} affectations supprim√©es",
            "nb_supprimes": count
        }
    
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"Erreur: {str(e)}")


@router.get("/verification")
def verifier_contraintes(db: Session = Depends(get_db)):
    """
    V√©rifie que toutes les contraintes sont respect√©es dans le planning actuel
    """
    from models.models import Examen, Affectation, Voeu, Enseignant
    from datetime import datetime, time as dt_time
    
    problemes = []
    avertissements = []
    
    # 1. V√©rifier la couverture des examens
    examens = db.query(Examen).all()
    for examen in examens:
        nb_surveillants = db.query(Affectation).filter(
            Affectation.examen_id == examen.id
        ).count()
        
        if nb_surveillants == 0:
            problemes.append({
                "type": "couverture",
                "severite": "critique",
                "message": f"Examen {examen.id} ({examen.date_examen}): AUCUN surveillant"
            })
        elif nb_surveillants == 1:
            avertissements.append({
                "type": "couverture",
                "severite": "attention",
                "message": f"Examen {examen.id} ({examen.date_examen}): 1 seul surveillant"
            })
    
    # 2. V√©rifier le respect des v≈ìux
    affectations = db.query(Affectation).all()
    for aff in affectations:
        examen = aff.examen
        seance = "Matin" if examen.heure_debut.hour < 13 else "Apr√®s-midi"
        
        voeu = db.query(Voeu).filter(
            Voeu.enseignant_id == aff.enseignant_id,
            Voeu.date_indisponible == examen.date_examen,
            Voeu.seance_indisponible == seance
        ).first()
        
        if voeu:
            problemes.append({
                "type": "voeu",
                "severite": "critique",
                "message": f"Enseignant {aff.enseignant_id} affect√© malgr√© un v≈ìu de non-disponibilit√©"
            })
    
    # 3. V√©rifier les chevauchements
    enseignants = db.query(Enseignant).all()
    for ens in enseignants:
        affectations_ens = db.query(Affectation).filter(
            Affectation.enseignant_id == ens.id
        ).join(Examen).order_by(Examen.date_examen, Examen.heure_debut).all()
        
        for i in range(len(affectations_ens) - 1):
            aff1 = affectations_ens[i]
            aff2 = affectations_ens[i + 1]
            
            # M√™me date et heure
            if (aff1.examen.date_examen == aff2.examen.date_examen and
                aff1.examen.heure_debut == aff2.examen.heure_debut):
                problemes.append({
                    "type": "chevauchement",
                    "severite": "critique",
                    "message": f"Enseignant {ens.id} affect√© √† 2 examens simultan√©s"
                })
    
    return {
        "valide": len(problemes) == 0,
        "nb_problemes": len(problemes),
        "nb_avertissements": len(avertissements),
        "problemes": problemes,
        "avertissements": avertissements
    }
