"""
Algorithme d'Optimisation Avanc√© pour la G√©n√©ration des Plannings de Surveillance
Version 3.0 - Quota maximum strict avec optimisation avanc√©e
"""

import math
from ortools.sat.python import cp_model
from sqlalchemy.orm import Session, joinedload
from models.models import Enseignant, Examen, Affectation, Voeu, GradeConfig
from datetime import datetime, date, time as dt_time
from typing import List, Dict, Tuple, Set
import time


class SurveillanceOptimizerV3:
    """
    Algorithme d'optimisation avanc√© avec gestion compl√®te des contraintes et priorit√©s.

    ARCHITECTURE:
    - Les enseignants sont affect√©s √† des S√âANCES (cr√©neaux horaires)
    - Tous les enseignants d'une s√©ance surveillent TOUS les examens de cette s√©ance
    - Si une s√©ance a 5 examens et que chaque examen n√©cessite 2 surveillants,
      alors la s√©ance n√©cessite 10 enseignants (5 √ó 2)

    R√àGLES DE BASE (Contraintes fortes - HARD - OBLIGATOIRES):
    1. Responsable d'examen doit √™tre pr√©sent et compte dans les quotas
    2. √âGALIT√â STRICTE par grade (tous les enseignants d'un m√™me grade font EXACTEMENT le m√™me nombre de s√©ances)
    3. Quota maximum strict par grade (pas de d√©passement autoris√©)
    4. Non-conflit horaire
    5. Nombre d'enseignants par s√©ance:
       - Mode normal: EXACTEMENT nb_examens √ó min_surveillants_par_examen
       - Mode adaptatif: MIN = nb_examens (1 par examen), MAX = nb_examens √ó min_surveillants_par_examen

    R√àGLES DE PR√âF√âRENCE (Contraintes souples - SOFT):
    1. Respect des v≈ìux de NON-disponibilit√© (v≈ìux = cr√©neaux o√π l'enseignant NE VEUT PAS surveiller)
    2. √âquilibre temporel (√©viter toujours premiers/derniers cr√©neaux)
    3. √âquilibre global entre enseignants

    PRIORIT√â DES CONTRAINTES:
    1. Pr√©sence du responsable d'examen (peut surveiller d'autres examens)
    2. Nombre d'enseignants par s√©ance (exact en mode normal, flexible en mode adaptatif)
    3. √âGALIT√â STRICTE par grade (OBLIGATOIRE - tous les enseignants du m√™me grade font le m√™me nombre)
    4. Quota maximum strict par grade (ne jamais d√©passer)
    5. √âVITER les v≈ìux de NON-disponibilit√© (p√©nalit√© si affectation sur un cr√©neau non-souhait√©)
    6. √âquilibre global
    """

    def __init__(self, db: Session):
        self.db = db
        self.model = cp_model.CpModel()
        self.solver = cp_model.CpSolver()
        self.warnings = []
        self.infos = []
        self.dispersions_par_grade = {}  # Stockage des dispersions par grade pour la fonction objectif

        # Charger la configuration des grades depuis la BDD
        self.grade_configs = self._load_grade_configs()

    def _load_grade_configs(self) -> Dict[str, Dict]:
        """
        Charge les configurations de grades avec quotas MAXIMUM stricts.

        IMPORTANT: Le quota repr√©sente le MAXIMUM de s√©ances qu'un enseignant
        d'un grade peut faire. Aucun d√©passement n'est autoris√©.
        """
        configs = self.db.query(GradeConfig).all()
        grade_dict = {}

        for config in configs:
            # Le quota maximum est d√©fini par nb_surveillances
            quota_maximum = config.nb_surveillances

            grade_dict[config.grade_code] = {
                "nb_surveillances": quota_maximum,  # Quota MAXIMUM pour ce grade
                "label": config.grade_nom,  # Nom du grade
            }

        return grade_dict

    def generer_planning_optimise(
        self,
        min_surveillants_par_examen: int = 2,
        allow_fallback: bool = True,
        respecter_voeux: bool = True,
        equilibrer_temporel: bool = True,
        activer_regroupement_temporel: bool = True,
        max_time_in_seconds: int = 900,
        relative_gap_limit: float = 0.01,
    ) -> Tuple[bool, int, float, List[str], Dict]:
        """
        G√©n√®re le planning optimal avec respect de toutes les contraintes.

        Args:
            min_surveillants_par_examen: Nombre minimum de surveillants par examen
            allow_fallback: Autoriser le fallback √† 1 surveillant si n√©cessaire
            respecter_voeux: Prendre en compte les v≈ìux (True fortement recommand√©)
            equilibrer_temporel: √âquilibrer la r√©partition des cr√©neaux horaires
            activer_regroupement_temporel: Activer le bonus de regroupement des s√©ances (d√©faut: True pour confort enseignants)
            max_time_in_seconds: Temps maximum de r√©solution en secondes (d√©faut: 900 = 15 minutes)
            relative_gap_limit: Gap relatif accept√© pour arr√™ter l'optimisation (d√©faut: 0.01 = 1%)

        Returns:
            (success, nb_affectations, temps_execution, messages)
        """
        start_time = time.time()

        print("=" * 80)
        print("üöÄ D√âMARRAGE DE L'ALGORITHME D'OPTIMISATION V3.0")
        print("=" * 80)

        # ===== PHASE 1: R√âCUP√âRATION DES DONN√âES =====
        print("\nüìä Phase 1: R√©cup√©ration des donn√©es...")

        enseignants = (
            self.db.query(Enseignant)
            .filter(Enseignant.participe_surveillance == True)
            .all()
        )

        examens = self.db.query(Examen).order_by(Examen.dateExam, Examen.h_debut).all()

        voeux = self.db.query(Voeu).all() if respecter_voeux else []
        list_voeux = []
        # Trier les v≈ìux (d√©l√©gu√© √† une m√©thode priv√©e)
        if respecter_voeux and voeux:
            try:
                list_voeux = self._trier_et_afficher_voeux(voeux)
            except Exception:
                # Ne pas √©chouer l'algorithme si le traitement des v≈ìux plante
                self.warnings.append(
                    "‚ö†Ô∏è Impossible de traiter les v≈ìux (format inattendu)"
                )

        print(f"   ‚úì {len(enseignants)} enseignants disponibles")
        print(f"   ‚úì {len(examens)} examens √† planifier")
        print(f"   ‚úì {len(voeux)} v≈ìux de non-disponibilit√©")

        # V√©rifications pr√©liminaires
        if not enseignants:
            self.warnings.append("‚ö†Ô∏è Aucun enseignant disponible pour la surveillance")
            return False, 0, 0.0, self.warnings

        if not examens:
            self.warnings.append("‚ö†Ô∏è Aucun examen √† planifier")
            return False, 0, 0.0, self.warnings

        # ===== PHASE 2: NETTOYAGE =====
        print("\nüóëÔ∏è  Phase 2: Nettoyage des anciennes affectations...")
        nb_supprimees = self.db.query(Affectation).delete()
        self.db.commit()
        print(f"   ‚úì {nb_supprimees} anciennes affectations supprim√©es")

        # ===== PHASE 3: GROUPEMENT PAR S√âANCE =====
        print("\nüóÇÔ∏è  Phase 3: Groupement des examens par s√©ance...")
        seances = self._grouper_examens_par_seance(examens)
        print(f"   ‚úì {len(seances)} s√©ances identifi√©es")

        if not seances:
            self.warnings.append("‚ö†Ô∏è Aucune s√©ance d'examen trouv√©e")
            return False, 0, 0.0, self.warnings

        # Afficher les s√©ances
        for idx, (seance_key, examens_seance) in enumerate(seances.items(), 1):
            date_exam, seance_code, semestre, session, jour_index = seance_key
            print(
                f"   ‚Ä¢ S√©ance {idx}: Jour {jour_index} - {date_exam.strftime('%d/%m/%Y')} - {seance_code} - {semestre} - {session} ({len(examens_seance)} examens)"
            )

        # ===== PHASE 4: ANALYSE DES RESPONSABLES D'EXAMENS =====
        print("\nüë• Phase 4: Identification des responsables d'examens...")
        responsables_examens = self._identifier_responsables(examens)
        print(f"   ‚úì {len(responsables_examens)} examens avec responsable identifi√©")


        # ===== PHASE 5: CR√âATION DES VARIABLES DE D√âCISION =====
        print("\nüî¢ Phase 5: Cr√©ation des variables de d√©cision...")

        # Variables: enseignant affect√© √† une s√©ance
        affectations_vars = {}
        for seance_key in seances.keys():
            for enseignant in enseignants:
                date_exam, seance_code, semestre, session, jour_index = seance_key
                var_name = f"aff_{date_exam.strftime('%Y%m%d')}_{seance_code}_{semestre}_{session}_j{jour_index}_ens_{enseignant.id}"
                affectations_vars[(seance_key, enseignant.id)] = self.model.NewBoolVar(
                    var_name
                )
        #      print(f"      ‚Ä¢ Variable: {var_name} | Cl√©: {seance_key}, Enseignant: {enseignant.id}")

        print(f"   ‚úì {len(affectations_vars)} variables bool√©ennes cr√©√©es")

        # ===== PHASE 6: APPLICATION DES CONTRAINTES =====
        print("\nüîí Phase 6: Application des contraintes...")

        # CONTRAINTE 1: Pr√©sence obligatoire des responsables (PRIORIT√â 1)
        print("   ‚Üí Contrainte 1: Pr√©sence obligatoire des responsables d'examens")
        nb_contraintes_responsables = self._contrainte_responsables(
            responsables_examens, seances, affectations_vars, enseignants
        )
        print(
            f"      ‚úì {nb_contraintes_responsables} responsables ajout√©s obligatoirement (peuvent surveiller d'autres examens)"
        )

        # CONTRAINTE 2: Nombre minimal d'enseignants par s√©ance (PRIORIT√â 2)
        print("   ‚Üí Contrainte 2: Nombre minimal d'enseignants par s√©ance")
        besoins_par_seance = self._contrainte_nombre_minimal(
            seances,
            enseignants,
            affectations_vars,
            min_surveillants_par_examen,
            allow_fallback,
        )
        print(f"      ‚úì Contraintes de couverture appliqu√©es")

        # CONTRAINTE 3: √âGALIT√â STRICTE par grade (PRIORIT√â 3 - OBLIGATOIRE)
        print("   ‚Üí Contrainte 3: √âGALIT√â STRICTE par grade (OBLIGATOIRE)")
        print("      ‚ö†Ô∏è Tous les enseignants d'un m√™me grade feront EXACTEMENT le m√™me nombre de s√©ances")
        charge_par_enseignant = self._contrainte_quotas_grades(
            enseignants, seances, affectations_vars, responsables_examens
        )
        print(f"      ‚úì Contrainte d'√©galit√© stricte appliqu√©e pour tous les grades")

        # CONTRAINTE 4: √âviter les v≈ìux de NON-disponibilit√© (PRIORIT√â 4)
        preferences_voeux = {}
        if respecter_voeux and list_voeux:
            print(
                "   ‚Üí Contrainte 4: Prise en compte des v≈ìux de NON-disponibilit√©"
            )
            preferences_voeux = self._contrainte_voeux(
                list_voeux, seances, enseignants, affectations_vars
            )
            nb_avec_voeu = len(preferences_voeux.get("avec_voeu", []))
            nb_sans_voeu = len(preferences_voeux.get("sans_voeu", []))
            print(f"      ‚úì {nb_avec_voeu} combinaisons √† √âVITER (v≈ìux de non-disponibilit√©)")
            print(f"      ‚úì {nb_sans_voeu} combinaisons sans contrainte de v≈ìu")
        else:
            print("   ‚Üí Contrainte 4: V≈ìux d√©sactiv√©s")

        # CONTRAINTE 5: Non-conflit horaire (automatique avec s√©ances)
        print("   ‚Üí Contrainte 5: Non-conflit horaire (automatique)")
        print(f"      ‚úì Garanti par le syst√®me de s√©ances")

        # CONTRAINTE 6: √âquilibre entre s√©ances (PRIORIT√â 6)
        print("   ‚Üí Contrainte 6: √âquilibre entre s√©ances de taille similaire")
        self._contrainte_equilibre_entre_seances(
            seances,
            enseignants,
            affectations_vars,
            besoins_par_seance,
            min_surveillants_par_examen,
        )
        print(f"      ‚úì Contraintes d'√©quilibre appliqu√©es")

        # CONTRAINTE 7: Interdire premi√®re+derni√®re s√©ance isol√©es (PRIORIT√â 7 - CONTRAINTE FORTE)
        print(
            "   ‚Üí Contrainte 7: Interdiction premi√®re+derni√®re s√©ance sans autres s√©ances"
        )
        self._contrainte_interdire_premiere_derniere_isolees(
            seances, enseignants, affectations_vars
        )
        print(
            f"      ‚úì Contrainte appliqu√©e: impossible d'avoir SEULEMENT 1√®re ET derni√®re s√©ance d'un jour"
        )

        # CONTRAINTE 8 (OPTIONNELLE): Favoriser s√©ances cons√©cutives
        bonus_consecutivite = None
        if activer_regroupement_temporel:
            print(
                "   ‚Üí Contrainte 8: Optimisation du regroupement des s√©ances (OPTIONNEL - ACTIV√â)"
            )
            bonus_consecutivite = self._contrainte_seances_consecutives(
                seances, enseignants, affectations_vars
            )
            print(
                f"      ‚úì Bonus de regroupement calcul√© (favorise les s√©ances group√©es)"
            )
        else:
            print("   ‚Üí Contrainte 8: Regroupement temporel (OPTIONNEL - D√âSACTIV√â)")

        # ===== PHASE 7: FONCTION OBJECTIF =====
        print("\nüéØ Phase 7: Configuration de la fonction objectif...")

        score_total = self._configurer_fonction_objectif(
            charge_par_enseignant,
            affectations_vars,
            seances,
            enseignants,
            equilibrer_temporel,
            preferences_voeux,
            bonus_consecutivite,
            activer_regroupement_temporel,
        )

        if activer_regroupement_temporel:
            print(f"      ‚úì Fonction objectif configur√©e:")
            print(f"         ‚Ä¢ Maximiser l'utilisation des quotas (35%)")
            print(f"         ‚Ä¢ Minimiser la dispersion globale entre enseignants (25%)")
            print(
                f"         ‚Ä¢ Minimiser la dispersion par grade (√©quit√© intra-grade) (20%)"
            )
            print(f"         ‚Ä¢ Favoriser les s√©ances regroup√©es (10% - optimis√©)")
            print(f"         ‚Ä¢ √âVITER les v≈ìux de non-disponibilit√© (10% - p√©nalit√©)")
        else:
            print(f"      ‚úì Fonction objectif configur√©e:")
            print(f"         ‚Ä¢ Maximiser l'utilisation des quotas (40%)")
            print(f"         ‚Ä¢ Minimiser la dispersion globale entre enseignants (30%)")
            print(
                f"         ‚Ä¢ Minimiser la dispersion par grade (√©quit√© intra-grade) (20%)"
            )
            print(f"         ‚Ä¢ √âVITER les v≈ìux de non-disponibilit√© (10% - p√©nalit√©)")

        # ===== PHASE 8: R√âSOLUTION =====
        print("\n‚ö° Phase 8: R√©solution du probl√®me...")

        # Configuration ultra-optimis√©e du solveur pour performances maximales
        import os

        # D√©tection automatique du nombre de c≈ìurs CPU
        nb_cores = os.cpu_count() or 8
        self.solver.parameters.num_search_workers = min(nb_cores, 16)  # Max 16 workers

        # Timeout optimis√© (param√®tre configurable)
        self.solver.parameters.max_time_in_seconds = max_time_in_seconds
        self.solver.parameters.log_search_progress = (
            False  # D√©sactiver les logs verbeux
        )

        # Strat√©gies pour acc√©l√©rer la recherche
        self.solver.parameters.cp_model_presolve = True  # Pr√©-r√©solution
        self.solver.parameters.linearization_level = 2  # Lin√©arisation avanc√©e
        self.solver.parameters.cp_model_probing_level = 2  # Probing avanc√©

        # NOUVEAUX PARAM√àTRES D'ACC√âL√âRATION ‚ö°‚ö°‚ö°
        self.solver.parameters.relative_gap_limit = (
            relative_gap_limit  # Gap relatif accept√© (param√®tre configurable)
        )
        self.solver.parameters.max_deterministic_time = (
            max_time_in_seconds / 2.0  # Temps d√©terministe = moiti√© du temps max
        )

        print(f"      ‚Üí Utilisation de {min(nb_cores, 16)} workers CPU")
        print(
            f"      ‚Üí Timeout: {max_time_in_seconds} secondes ({max_time_in_seconds / 60:.1f} min)"
        )
        print(f"      ‚Üí Gap relatif accept√©: {relative_gap_limit * 100:.1f}%")

        status = self.solver.Solve(self.model)

        # ===== PHASE 9: TRAITEMENT DES R√âSULTATS =====
        print("\nüìã Phase 9: Traitement des r√©sultats...")

        if status == cp_model.OPTIMAL:
            print("   ‚úÖ Solution OPTIMALE trouv√©e!")
            status_text = "OPTIMALE"
        elif status == cp_model.FEASIBLE:
            print("   ‚úÖ Solution R√âALISABLE trouv√©e")
            status_text = "R√âALISABLE"
        else:
            print("   ‚ùå Aucune solution trouv√©e")
            
            self.warnings.append(
                "‚ùå Impossible de trouver une solution avec TOUTES les contraintes"
            )
            self.warnings.append("=== üí° SOLUTIONS POSSIBLES ===")
            self.warnings.append("ÔøΩ Suggestions pour r√©soudre le probl√®me:")
            self.warnings.append("   ‚Ä¢ V√©rifier la configuration des grades (quotas, nombre d'enseignants disponibles)")
            self.warnings.append(f"   ‚Ä¢ Augmenter le temps de r√©solution (actuellement: {max_time_in_seconds}s)")
            self.warnings.append(f"   ‚Ä¢ R√©duire le nombre de surveillants par examen (actuellement: {min_surveillants_par_examen})")
            self.warnings.append("   ‚Ä¢ Augmenter le taux de tol√©rance pour l'√©quilibre entre s√©ances")
            self.warnings.append(f"   ‚Ä¢ Activer le mode fallback (actuellement: {'activ√©' if allow_fallback else 'd√©sactiv√©'})")
            self.warnings.append("   ‚Ä¢ V√©rifier que tous les enseignants participants sont bien configur√©s (participe_surveillance=True)")
            self.warnings.append("===================================")
            return (
                False,
                0,
                time.time() - start_time,
                self.warnings,
            )

        # Sauvegarder les affectations
        nb_affectations = self._sauvegarder_affectations_par_seance(
            affectations_vars, seances, enseignants, responsables_examens
        )

        execution_time = time.time() - start_time

        # ===== PHASE 10: V√âRIFICATIONS ET STATISTIQUES =====
        print("\nüìä Phase 10: V√©rifications et statistiques...")

        # V√©rifications finales
        self._verifier_couverture_seances(seances, besoins_par_seance)
        self._generer_statistiques(enseignants, seances, affectations_vars)
        
        # Statistiques sur les v≈ìux de non-disponibilit√©
        if respecter_voeux and preferences_voeux and preferences_voeux.get("avec_voeu"):
            self._generer_statistiques_voeux(
                affectations_vars, 
                preferences_voeux, 
                enseignants,
                len(list_voeux)
            )

        print("\n" + "=" * 80)
        print(
            f"‚úÖ G√âN√âRATION TERMIN√âE EN {execution_time:.2f}s - {nb_affectations} affectations cr√©√©es"
        )
        print(f"üìä Statut: {status_text}")
        print("=" * 80)

        return (
            True,
            nb_affectations,
            execution_time,
            self.warnings + self.infos,
        )

    # ========== CONTRAINTES ==========

    def _contrainte_responsables(
        self,
        responsables_examens: Dict[int, int],
        seances: Dict,
        affectations_vars: Dict,
        enseignants: List[Enseignant],
    ) -> int:
        """
        CONTRAINTE 1 (PRIORIT√â 1): Le responsable d'un examen doit √™tre pr√©sent.
        Le responsable PEUT surveiller d'autres examens pendant le m√™me cr√©neau.
        Il COMPTE dans les quotas de surveillance.
        """
        nb_responsables_contraints = 0

        # Pour chaque s√©ance et chaque examen de la s√©ance
        for seance_key, examens_seance in seances.items():
            for examen in examens_seance:
                if examen.id in responsables_examens:
                    responsable_id = responsables_examens[examen.id]
                    # Trouver l'objet enseignant correspondant pour avoir son code_smartex
                    responsable_obj = next(
                        (ens for ens in enseignants if ens.id == responsable_id), None
                    )

                    # Pr√©parer les informations de l'examen pour l'affichage
                    date_exam_str = (
                        examen.dateExam.strftime("%d/%m/%Y")
                        if examen.dateExam
                        else "Date inconnue"
                    )
                    heure_exam_str = (
                        examen.h_debut.strftime("%H:%M")
                        if examen.h_debut
                        else "Heure inconnue"
                    )
                    salle_exam = (
                        examen.cod_salle
                        if hasattr(examen, "cod_salle")
                        else "Salle inconnue"
                    )

                    # V√©rifier que le responsable fait partie des enseignants disponibles
                    if responsable_obj:
                        # Ajouter la contrainte : le responsable doit √™tre affect√© √† la s√©ance de cet examen
                        var = affectations_vars.get((seance_key, responsable_id))
                        if var is not None:
                            self.model.Add(var == 1)
                            nb_responsables_contraints += 1
                        else:
                            code_smartex = (
                                responsable_obj.code_smartex
                                if responsable_obj.code_smartex
                                else f"ID_{responsable_id}"
                            )
                            nom_complet = (
                                f"{responsable_obj.nom} {responsable_obj.prenom}".strip()
                                if hasattr(responsable_obj, "prenom")
                                else responsable_obj.nom
                            )
                    else:
                        # Si l'enseignant n'est pas dans la liste des disponibles, chercher dans la BDD
                        code_smartex = (
                            examen.enseignant
                            if hasattr(examen, "enseignant") and examen.enseignant
                            else f"ID_{responsable_id}"
                        )

                        # Tenter de r√©cup√©rer l'enseignant depuis la BDD pour avoir son nom complet
                        try:
                            from models.models import Enseignant

                            responsable_bdd = (
                                self.db.query(Enseignant)
                                .filter(Enseignant.id == responsable_id)
                                .first()
                            )
                            if responsable_bdd:
                                nom_complet = (
                                    f"{responsable_bdd.nom} {responsable_bdd.prenom}".strip()
                                    if hasattr(responsable_bdd, "prenom")
                                    and responsable_bdd.prenom
                                    else responsable_bdd.nom
                                )
                                code_smartex = (
                                    responsable_bdd.code_smartex
                                    if responsable_bdd.code_smartex
                                    else code_smartex
                                )
                            else:
                                pass
                        except Exception as e:
                            pass

        return nb_responsables_contraints

    def _contrainte_nombre_minimal(
        self,
        seances: Dict,
        enseignants: List[Enseignant],
        affectations_vars: Dict,
        min_surveillants_par_examen: int,
        allow_fallback: bool,
    ) -> Dict:
        """
        CONTRAINTE 2 (PRIORIT√â 2): Nombre exact d'enseignants par s√©ance.

        IMPORTANT: Les enseignants affect√©s √† une s√©ance surveillent TOUS les examens de cette s√©ance.
        Le nombre total de surveillants requis pour une s√©ance est EXACTEMENT:
        nb_examens √ó min_surveillants_par_examen

        Exemple concret:
        - S√©ance avec 15 examens et min_surveillants_par_examen = 2
        - Nombre id√©al et maximum = 15 √ó 2 = 30 enseignants
        - Chaque examen aura exactement 2 surveillants (les 30 enseignants surveillent tous les 15 examens)

        ADAPTATION si n√©cessaire:
        - Si pas assez d'enseignants disponibles totalement, r√©duction proportionnelle
        - Garantit au minimum 1 surveillant par examen (minimum absolu)
        - En mode ADAPTATIF: NE JAMAIS D√âPASSER nb_examens √ó min_surveillants_par_examen
        """
        besoins_par_seance = {}

        # Calculer les quotas totaux disponibles
        quotas_totaux = 0
        enseignants_par_grade = {}
        for enseignant in enseignants:
            if enseignant.grade_code not in enseignants_par_grade:
                enseignants_par_grade[enseignant.grade_code] = []
            enseignants_par_grade[enseignant.grade_code].append(enseignant)

        for grade_code, enseignants_grade in enseignants_par_grade.items():
            grade_config = self.grade_configs.get(grade_code, {"nb_surveillances": 2})
            quota_fixe = grade_config.get("nb_surveillances", 2)
            quotas_totaux += len(enseignants_grade) * quota_fixe

        # Calculer le besoin total avec min_surveillants_par_examen
        nb_total_examens = sum([len(examens) for examens in seances.values()])
        besoin_ideal = nb_total_examens * min_surveillants_par_examen
        besoin_minimal = nb_total_examens  # Au minimum 1 surveillant par examen

        # V√©rifier s'il faut adapter (quotas insuffisants)
        # ‚ö†Ô∏è MODE ADAPTATIF SEULEMENT SI allow_fallback=True
        mode_adaptatif = allow_fallback and (quotas_totaux < besoin_ideal)

        if mode_adaptatif:
            # Calculer combien d'examens peuvent avoir min_surveillants_par_examen
            # et combien devront se contenter de 1 seul
            nb_examens_min_complet = (quotas_totaux - besoin_minimal) // (
                min_surveillants_par_examen - 1
            )
            nb_examens_min_reduit = nb_total_examens - nb_examens_min_complet

            self.warnings.append(
                f"‚ö†Ô∏è MODE ADAPTATIF ACTIV√â: Quotas totaux ({quotas_totaux}) < besoin id√©al ({besoin_ideal})"
            )
            self.warnings.append(
                f"   ‚Üí Adaptation: ~{nb_examens_min_complet} examens avec {min_surveillants_par_examen} surveillants, "
                f"~{nb_examens_min_reduit} examens avec 1 seul surveillant"
            )

        for seance_key, examens_seance in seances.items():
            nb_examens = len(examens_seance)

            # Nombre id√©al et maximum pour cette s√©ance = nb_examens √ó min_surveillants_par_examen
            nb_requis_ideal = nb_examens * min_surveillants_par_examen
            # Nombre minimal absolu (1 surveillant par examen)
            nb_requis_minimal = nb_examens

            besoins_par_seance[seance_key] = nb_requis_ideal

            surveillants_pour_seance = [
                affectations_vars[(seance_key, ens.id)] for ens in enseignants
            ]

            # V√©rifier si suffisamment d'enseignants disponibles
            if nb_requis_minimal > len(enseignants):
                # Pas assez d'enseignants pour garantir 1 par examen
                self.model.Add(sum(surveillants_pour_seance) >= len(enseignants))

            elif mode_adaptatif:
                # MODE ADAPTATIF: Nombre flexible mais NE JAMAIS D√âPASSER l'id√©al
                # R√àGLE 1: Minimum strict (exactement 1 enseignant par examen)
                self.model.Add(sum(surveillants_pour_seance) >= nb_requis_minimal)

                # R√àGLE 2: MAXIMUM ABSOLU = nb_examens √ó min_surveillants_par_examen
                # ‚ö†Ô∏è NE JAMAIS D√âPASSER CE MAXIMUM, m√™me en mode adaptatif
                self.model.Add(sum(surveillants_pour_seance) <= nb_requis_ideal)
            else:
                # MODE NORMAL: EXACTEMENT nb_examens √ó min_surveillants_par_examen
                # Pour 15 examens avec min=2 ‚Üí EXACTEMENT 30 enseignants (pas plus, pas moins)

                # CONTRAINTE STRICTE: EXACTEMENT nb_requis_ideal surveillants
                self.model.Add(sum(surveillants_pour_seance) == nb_requis_ideal)

        return besoins_par_seance

    def _contrainte_quotas_grades(
        self,
        enseignants: List[Enseignant],
        seances: Dict,
        affectations_vars: Dict,
        responsables_examens: Dict[int, int],
    ) -> Dict:
        """
        CONTRAINTE 3 (PRIORIT√â 3): √âgalit√© stricte du nombre de s√©ances par grade.

        R√àGLE STRICTE: Tous les enseignants d'un m√™me grade doivent faire EXACTEMENT le m√™me nombre de s√©ances.

        IMPORTANT:
        - Chaque enseignant d'un m√™me grade doit avoir la m√™me charge de surveillance
        - Le quota maximum du grade reste une limite sup√©rieure stricte
        - Si un responsable a trop d'examens par rapport √† cette √©galit√©, cela cr√©era un INFEASIBLE

        Exemple:
        - Grade "Professeur": quota maximum = 3 s√©ances
        - Si 5 profs du m√™me grade participent, ils feront TOUS exactement le m√™me nombre (ex: tous 2 s√©ances)
        - Impossible d'avoir 2 profs √† 3 s√©ances et 3 profs √† 1 s√©ance
        """
        charge_par_enseignant = {}

        # Grouper les enseignants par grade
        enseignants_par_grade = {}
        for enseignant in enseignants:
            if enseignant.grade_code not in enseignants_par_grade:
                enseignants_par_grade[enseignant.grade_code] = []
            enseignants_par_grade[enseignant.grade_code].append(enseignant)

        # Pour chaque grade, imposer l'√©galit√© stricte entre tous les enseignants
        for grade_code, enseignants_grade in enseignants_par_grade.items():
            grade_config = self.grade_configs.get(
                grade_code,
                {
                    "nb_surveillances": 2  # Par d√©faut, quota fixe = 2
                },
            )
            quota_fixe = grade_config.get("nb_surveillances", 2)

            # Calculer les charges pour ce grade
            charges = []
            for enseignant in enseignants_grade:
                charge = sum(
                    [
                        affectations_vars[(seance_key, enseignant.id)]
                        for seance_key in seances.keys()
                    ]
                )
                charge_par_enseignant[enseignant.id] = charge
                charges.append(charge)

            # Imposer l'√©galit√© stricte et le quota maximum
            if charges:
                # ‚ö†Ô∏è CONTRAINTE OBLIGATOIRE 1: Aucun enseignant ne doit d√©passer le quota fixe de son grade
                for charge in charges:
                    self.model.Add(charge <= quota_fixe)

                # ‚ö†Ô∏è CONTRAINTE OBLIGATOIRE 2: √âGALIT√â PARFAITE entre tous les enseignants du m√™me grade
                # Cette contrainte est STRICTE et NON N√âGOCIABLE
                if len(charges) > 1:
                    # Tous les enseignants du m√™me grade doivent avoir EXACTEMENT la m√™me charge
                    # On force l'√©galit√© entre chaque enseignant et le premier de la liste
                    charge_reference = charges[0]
                    for i, charge in enumerate(charges[1:], start=1):
                        # Contrainte d'√©galit√© stricte (HARD CONSTRAINT)
                        self.model.Add(charge == charge_reference)
                    
                    # Plus besoin de calculer la dispersion car elle sera toujours 0
                    # On la conserve quand m√™me pour compatibilit√© avec la fonction objectif
                    if not hasattr(self, "dispersions_par_grade"):
                        self.dispersions_par_grade = {}
                    # Cr√©er une variable de dispersion qui sera forc√©ment 0
                    dispersion_grade = self.model.NewIntVar(
                        0, 0, f"dispersion_{grade_code}"
                    )
                    self.dispersions_par_grade[grade_code] = dispersion_grade

        return charge_par_enseignant

    def _contrainte_voeux(
        self,
        list_voeux: List[Dict],
        seances: Dict,
        enseignants: List[Enseignant],
        affectations_vars: Dict,
    ) -> Dict:
        """
        CONTRAINTE 4 (PRIORIT√â 4): √âviter les v≈ìux de NON-disponibilit√©.

        IMPORTANT: Les v≈ìux sont des cr√©neaux o√π l'enseignant NE SOUHAITE PAS surveiller.
        - Un v≈ìu signifie "Je NE VEUX PAS surveiller √† ce cr√©neau"
        - Les enseignants avec v≈ìux pour un cr√©neau doivent √™tre √âVIT√âS pour ce cr√©neau
        - Si impossible d'√©viter (manque d'enseignants), l'affectation reste possible mais p√©nalis√©e

        Args:
            list_voeux: Liste de dictionnaires avec les attributs:
                - id: Code smartex de l'enseignant
                - nom: Nom de l'enseignant
                - date_voeu: Date du v≈ìu (objet date)
                - seance: Code s√©ance (S1, S2, S3, S4)
                - heure: Heure de la s√©ance

        Retourne un dictionnaire pour calculer les p√©nalit√©s dans la fonction objectif.
        """
        preferences = {
            "avec_voeu": [],  # (seance_key, enseignant_id) avec v≈ìu de NON-disponibilit√© ‚Üí P√âNALIT√â
            "sans_voeu": [],  # (seance_key, enseignant_id) sans v≈ìu ‚Üí NEUTRE
        }

        # Construire un mapping code_smartex -> enseignant_id
        code_to_id = {
            ens.code_smartex: ens.id for ens in enseignants if ens.code_smartex
        }

        # Construire un set de tuples (enseignant_id, date_voeu, seance) pour recherche rapide
        voeux_set = set()
        voeux_rejetes = []
        for voeu_dict in list_voeux:
            code_smartex = voeu_dict.get("id")
            date_voeu = voeu_dict.get("date_voeu")
            seance_val = voeu_dict.get("seance")

            # Debug: pourquoi certains v≈ìux sont rejet√©s
            raison_rejet = []
            if not code_smartex:
                raison_rejet.append("code_smartex vide")
            elif code_smartex not in code_to_id:
                raison_rejet.append(
                    f"code_smartex '{code_smartex}' non trouv√© dans enseignants"
                )
            if not date_voeu:
                raison_rejet.append("date_voeu vide")
            if not seance_val:
                raison_rejet.append("seance vide")

            if code_smartex and code_smartex in code_to_id and date_voeu and seance_val:
                enseignant_id = code_to_id[code_smartex]
                # Normaliser la s√©ance
                seance = str(seance_val).upper().strip()
                voeux_set.add((enseignant_id, date_voeu, seance))
            else:
                voeux_rejetes.append((voeu_dict, raison_rejet))

        # Pour chaque combinaison (s√©ance, enseignant), v√©rifier si un v≈ìu existe
        for seance_key in seances.keys():
            date_exam, seance_code, semestre, session, jour_index = seance_key
            # Normaliser le code de s√©ance pour comparaison
            seance_normalized = seance_code.upper().strip()
            
            for enseignant in enseignants:
                # V√©rifier si l'enseignant a un v≈ìu de NON-disponibilit√© pour cette date et cette s√©ance
                lookup_key = (enseignant.id, date_exam, seance_normalized)
                
                if lookup_key in voeux_set:
                    # P√âNALIT√â: Enseignant a exprim√© un v≈ìu de NON-disponibilit√© pour ce cr√©neau
                    # Il faut √âVITER de l'affecter ici (mais c'est possible si n√©cessaire)
                    preferences["avec_voeu"].append((seance_key, enseignant.id))
                else:
                    # NEUTRE: Pas de v≈ìu de non-disponibilit√© pour ce cr√©neau (affectation sans p√©nalit√©)
                    preferences["sans_voeu"].append((seance_key, enseignant.id))

        return preferences

    def _contrainte_equilibre_entre_seances(
        self,
        seances: Dict,
        enseignants: List[Enseignant],
        affectations_vars: Dict,
        besoins_par_seance: Dict,
        min_surveillants_par_examen: int,
    ):
        """
        CONTRAINTE 6 (PRIORIT√â 6): √âquilibre adaptatif entre s√©ances de taille similaire.

        Les s√©ances ayant le m√™me nombre d'examens doivent avoir approximativement
        le m√™me nombre d'enseignants affect√©s, avec une tol√©rance adapt√©e au contexte.

        ADAPTATION AU MODE:
        - Mode NORMAL: Toutes les s√©ances de m√™me taille ont d√©j√† le m√™me nombre exact
                       ‚Üí Contrainte redondante mais pas conflictuelle (ignor√©e)
        - Mode ADAPTATIF: Les s√©ances ont des nombres variables d'enseignants
                         ‚Üí Tol√©rance large pour √©viter les conflits INFEASIBLE

        Strat√©gie:
        - Grouper les s√©ances par nombre d'examens
        - Calculer si on est en mode adaptatif (besoin != nb_examens √ó min)
        - Appliquer une tol√©rance adapt√©e: large en adaptatif, stricte en normal
        """
        # D√©terminer si on est en mode adaptatif global
        # Mode adaptatif = au moins une s√©ance a un besoin flexible
        mode_adaptatif_global = False
        for seance_key, examens_seance in seances.items():
            nb_examens = len(examens_seance)
            besoin_ideal = nb_examens * min_surveillants_par_examen
            besoin_reel = besoins_par_seance.get(seance_key, besoin_ideal)
            # Si le besoin stock√© est l'id√©al, mais on pourrait avoir moins, c'est adaptatif
            # On d√©tecte le mode adaptatif si les contraintes permettent une plage
            if besoin_reel != besoin_ideal or nb_examens < besoin_ideal:
                mode_adaptatif_global = True
                break

        # Grouper les s√©ances par nombre d'examens
        seances_par_taille = {}
        for seance_key, examens_seance in seances.items():
            nb_examens = len(examens_seance)
            if nb_examens not in seances_par_taille:
                seances_par_taille[nb_examens] = []
            seances_par_taille[nb_examens].append(seance_key)

        # Pour chaque groupe de s√©ances de m√™me taille
        for nb_examens, seances_groupe in seances_par_taille.items():
            # Si une seule s√©ance dans ce groupe, pas besoin d'√©quilibrer
            if len(seances_groupe) <= 1:
                continue

            # Calculer le besoin id√©al pour ce groupe
            besoin_ideal = nb_examens * min_surveillants_par_examen

            # V√©rifier si toutes les s√©ances de ce groupe sont en mode normal (contrainte exacte)
            # Si oui, cette contrainte est redondante, on peut la sauter
            toutes_exactes = all(
                # On v√©rifie si la contrainte est "exacte" (pas une plage)
                besoin_ideal == nb_examens * min_surveillants_par_examen
                for seance_key in seances_groupe
            )

            # Calculer le nombre d'enseignants pour chaque s√©ance du groupe
            nb_enseignants_par_seance = {}
            for seance_key in seances_groupe:
                surveillants_pour_seance = [
                    affectations_vars[(seance_key, ens.id)] for ens in enseignants
                ]
                nb_enseignants_par_seance[seance_key] = sum(surveillants_pour_seance)

            # D√©finir la tol√©rance en fonction du mode
            if mode_adaptatif_global:
                # MODE ADAPTATIF: Tol√©rance LARGE pour √©viter les conflits
                # La tol√©rance doit √™tre au moins √©gale √† la plage possible
                # Plage = [nb_examens, nb_examens √ó min_surveillants_par_examen]
                # Donc tol√©rance = plage / 2 pour permettre de la flexibilit√©
                tolerance = max(
                    int(
                        nb_examens * (min_surveillants_par_examen - 1) * 0.5
                    ),  # 50% de la plage
                    nb_examens,  # Au minimum le nombre d'examens
                    5,  # Au moins 5 enseignants de diff√©rence
                )
                self.infos.append(
                    f"   üîÑ √âquilibre ADAPTATIF: {len(seances_groupe)} s√©ances avec {nb_examens} examens "
                    f"(tol√©rance large: ¬±{tolerance} enseignants)"
                )
            else:
                # MODE NORMAL: Tol√©rance stricte (mais en pratique redondante)
                # Les s√©ances ont d√©j√† exactement le m√™me nombre via la contrainte 2
                tolerance = max(2, int(nb_examens * 0.05))  # 5% ou 2 minimum
                self.infos.append(
                    f"   üîÑ √âquilibre NORMAL: {len(seances_groupe)} s√©ances avec {nb_examens} examens "
                    f"(tol√©rance stricte: ¬±{tolerance} enseignants - redondante avec contrainte 2)"
                )

            # Appliquer les contraintes d'√©quilibre pour chaque paire
            for i, seance_key_1 in enumerate(seances_groupe):
                for seance_key_2 in seances_groupe[i + 1 :]:
                    nb_ens_1 = nb_enseignants_par_seance[seance_key_1]
                    nb_ens_2 = nb_enseignants_par_seance[seance_key_2]

                    # Contrainte: |nb_ens_1 - nb_ens_2| <= tolerance
                    # √âquivalent √†: nb_ens_1 - nb_ens_2 <= tolerance ET nb_ens_2 - nb_ens_1 <= tolerance
                    self.model.Add(nb_ens_1 - nb_ens_2 <= tolerance)
                    self.model.Add(nb_ens_2 - nb_ens_1 <= tolerance)

    def _contrainte_interdire_premiere_derniere_isolees(
        self, seances: Dict, enseignants: List[Enseignant], affectations_vars: Dict
    ):
        """
        CONTRAINTE 7 (FORTE): Interdire d'avoir UNIQUEMENT la premi√®re ET la derni√®re s√©ance d'un jour.

        R√®gle stricte:
        - Si un enseignant a la 1√®re s√©ance ET la derni√®re s√©ance d'un jour
        - Alors il DOIT avoir au moins une autre s√©ance dans ce jour
        - Sinon, c'est INTERDIT (contrainte forte)

        Exemple:
        - Jour avec s√©ances [S1, S2, S3, S4]
        - INTERDIT: avoir uniquement S1 + S4 (sans S2 ni S3)
        - AUTORIS√â: S1 + S2, S1 + S3, S1 + S2 + S4, etc.
        """

        # Grouper les s√©ances par jour et identifier premi√®re/derni√®re
        seances_par_jour = {}
        for seance_key in seances.keys():
            jour_index = seance_key[4]  # Index du jour (1, 2, 3...)
            seance_code = seance_key[1]  # Code de la s√©ance (S1, S2, S3, S4)

            if jour_index not in seances_par_jour:
                seances_par_jour[jour_index] = []
            seances_par_jour[jour_index].append((seance_key, seance_code))

        # Pour chaque jour avec au moins 3 s√©ances (si < 3, pas de probl√®me)
        nb_contraintes_ajoutees = 0
        for jour_index, seances_jour in seances_par_jour.items():
            if len(seances_jour) < 3:
                # Pas assez de s√©ances pour que la contrainte ait du sens
                continue

            # Trier les s√©ances par code (S1 < S2 < S3 < S4)
            seances_jour_triees = sorted(seances_jour, key=lambda x: x[1])
            premiere_seance_key = seances_jour_triees[0][0]
            derniere_seance_key = seances_jour_triees[-1][0]
            seances_intermediaires = [s[0] for s in seances_jour_triees[1:-1]]

            # Pour chaque enseignant
            for enseignant in enseignants:
                # Variables: enseignant affect√© √† premi√®re/derni√®re/interm√©diaires
                a_premiere = affectations_vars.get((premiere_seance_key, enseignant.id))
                a_derniere = affectations_vars.get((derniere_seance_key, enseignant.id))

                if a_premiere is None or a_derniere is None:
                    continue

                # Variable: enseignant a au moins une s√©ance interm√©diaire
                a_intermediaire = [
                    affectations_vars.get((seance_key, enseignant.id))
                    for seance_key in seances_intermediaires
                    if affectations_vars.get((seance_key, enseignant.id)) is not None
                ]

                if not a_intermediaire:
                    continue

                # CONTRAINTE FORTE: Si (premi√®re ET derni√®re), alors au moins une interm√©diaire
                # Logique: NOT(premi√®re AND derni√®re) OR (au moins une interm√©diaire)
                # √âquivalent: premi√®re + derni√®re <= 1 + sum(interm√©diaires)
                # Si premi√®re=1 et derni√®re=1, alors sum(interm√©diaires) >= 1

                self.model.Add(a_premiere + a_derniere <= 1 + sum(a_intermediaire))
                nb_contraintes_ajoutees += 1


    def _contrainte_seances_consecutives(
        self, seances: Dict, enseignants: List[Enseignant], affectations_vars: Dict
    ):
        """
        CONTRAINTE 8 (OPTIONNELLE): Favorise le regroupement des s√©ances par jour.
        VERSION OPTIMIS√âE pour performance.

        Objectifs:
        1. Favoriser les s√©ances regroup√©es dans un m√™me jour (plusieurs s√©ances = BONUS)
        2. P√©naliser les s√©ances isol√©es dans un jour (1 seule s√©ance = P√âNALIT√â)

        R√®gle:
        - Si un enseignant a N >= 2 s√©ances dans un m√™me jour ‚Üí BONUS = +N
        - Si un enseignant a 1 seule s√©ance dans un jour ‚Üí P√âNALIT√â = -2

        Retourne un score de regroupement pour la fonction objectif.
        """

        # Grouper les s√©ances par jour (date uniquement, pas par code de s√©ance)
        seances_par_jour = {}
        for seance_key in seances.keys():
            date_exam = seance_key[0]  # Date de l'examen
            jour_index = seance_key[4]  # Index du jour (1, 2, 3...)

            if jour_index not in seances_par_jour:
                seances_par_jour[jour_index] = []
            seances_par_jour[jour_index].append(seance_key)

        bonus_total = []

        # Pour chaque enseignant et chaque jour, calculer le bonus/p√©nalit√© de regroupement
        for enseignant in enseignants:
            for jour_index, seances_jour in seances_par_jour.items():
                # Nombre de s√©ances de cet enseignant ce jour
                nb_seances_jour = sum(
                    [
                        affectations_vars[(seance_key, enseignant.id)]
                        for seance_key in seances_jour
                    ]
                )

                # Variable pour savoir si l'enseignant a au moins 1 s√©ance ce jour
                a_une_seance = self.model.NewBoolVar(
                    f"ens_{enseignant.id}_jour_{jour_index}_a_seance"
                )
                self.model.Add(nb_seances_jour >= 1).OnlyEnforceIf(a_une_seance)
                self.model.Add(nb_seances_jour == 0).OnlyEnforceIf(a_une_seance.Not())

                # Variable pour savoir si l'enseignant a au moins 2 s√©ances ce jour (regroup√©es)
                a_plusieurs_seances = self.model.NewBoolVar(
                    f"ens_{enseignant.id}_jour_{jour_index}_a_plusieurs"
                )
                self.model.Add(nb_seances_jour >= 2).OnlyEnforceIf(a_plusieurs_seances)
                self.model.Add(nb_seances_jour <= 1).OnlyEnforceIf(
                    a_plusieurs_seances.Not()
                )

                # Variable pour savoir si l'enseignant a exactement 1 s√©ance ce jour (isol√©e)
                seance_isolee = self.model.NewBoolVar(
                    f"ens_{enseignant.id}_jour_{jour_index}_isolee"
                )
                # seance_isolee = a_une_seance AND NOT a_plusieurs_seances
                self.model.AddBoolAnd(
                    [a_une_seance, a_plusieurs_seances.Not()]
                ).OnlyEnforceIf(seance_isolee)
                self.model.AddBoolOr(
                    [a_une_seance.Not(), a_plusieurs_seances]
                ).OnlyEnforceIf(seance_isolee.Not())

                # Contribution au score pour ce jour:
                # - Si plusieurs s√©ances (regroup√©es): bonus = +nb_seances_jour
                # - Si s√©ance isol√©e: p√©nalit√© = -2
                # - Si aucune s√©ance: neutre = 0

                max_seances_jour = len(seances_jour)
                contribution_jour = self.model.NewIntVar(
                    -2,  # Pire cas: s√©ance isol√©e
                    max_seances_jour,  # Meilleur cas: toutes les s√©ances du jour
                    f"contrib_ens_{enseignant.id}_jour_{jour_index}",
                )

                # Si s√©ance isol√©e: contribution = -2
                # Si plusieurs s√©ances: contribution = nb_seances_jour
                # Si aucune s√©ance: contribution = 0
                self.model.Add(contribution_jour == -2).OnlyEnforceIf(seance_isolee)
                self.model.Add(contribution_jour == nb_seances_jour).OnlyEnforceIf(
                    a_plusieurs_seances
                )
                self.model.Add(contribution_jour == 0).OnlyEnforceIf(a_une_seance.Not())

                bonus_total.append(contribution_jour)

        # Cr√©er une variable pour le score de regroupement
        score_regroupement = None

        if bonus_total:
            # Calculer les bornes du score
            nb_jours = len(seances_par_jour)
            nb_enseignants = len(enseignants)
            max_seances_par_jour = max([len(s) for s in seances_par_jour.values()])

            # Pire cas: tous les enseignants ont des s√©ances isol√©es dans tous les jours
            min_score = -2 * nb_jours * nb_enseignants
            # Meilleur cas: tous les enseignants ont toutes leurs s√©ances regroup√©es
            max_score = max_seances_par_jour * nb_jours * nb_enseignants

            score_regroupement = self.model.NewIntVar(
                min_score, max_score, "score_regroupement_jours"
            )
            self.model.Add(score_regroupement == sum(bonus_total))

        return score_regroupement




    # ========== FONCTION OBJECTIF ==========

    def _configurer_fonction_objectif(
        self,
        charge_par_enseignant: Dict,
        affectations_vars: Dict,
        seances: Dict,
        enseignants: List[Enseignant],
        equilibrer_temporel: bool,
        preferences_voeux: Dict = None,
        bonus_consecutivite=None,
        activer_regroupement_temporel: bool = False,
    ) -> cp_model.IntVar:
        """
        Configure la fonction objectif multi-crit√®res pour maximiser la satisfaction globale.

        Composantes du score (avec regroupement temporel activ√©):
        1. Maximisation des quotas (utiliser le maximum de s√©ances par enseignant) - POIDS: 35%
        2. √âquilibre global de charge (minimiser dispersion) - POIDS: 25%
        3. √âquilibre par grade (minimiser dispersion dans chaque grade) - POIDS: 20%
        4. Bonus regroupement (favoriser s√©ances regroup√©es) - POIDS: 10%
        5. P√©nalit√© pour v≈ìux de non-disponibilit√© (√©viter d'affecter sur cr√©neaux non-souhait√©s) - POIDS: 10%

        Composantes du score (sans regroupement temporel):
        1. Maximisation des quotas (utiliser le maximum de s√©ances par enseignant) - POIDS: 40%
        2. √âquilibre global de charge (minimiser dispersion) - POIDS: 30%
        3. √âquilibre par grade (minimiser dispersion dans chaque grade) - POIDS: 20%
        4. P√©nalit√© pour v≈ìux de non-disponibilit√© (√©viter d'affecter sur cr√©neaux non-souhait√©s) - POIDS: 10%
        """

        # COMPOSANTE 1: Maximisation de l'utilisation des quotas (NOUVEAU - PRIORITAIRE)
        # Objectif: Affecter autant de s√©ances que possible √† chaque enseignant (jusqu'√† son quota max)
        charges = list(charge_par_enseignant.values())
        total_affectations = None

        if charges:
            # Calculer le nombre total d'affectations
            total_affectations = self.model.NewIntVar(
                0, len(enseignants) * len(seances), "total_affectations"
            )
            self.model.Add(total_affectations == sum(charges))

        # COMPOSANTE 2: √âquilibre global de charge (IMPORTANT)
        dispersion = None
        if charges:
            charge_min = self.model.NewIntVar(0, len(seances), "charge_min")
            charge_max = self.model.NewIntVar(0, len(seances), "charge_max")

            self.model.AddMinEquality(charge_min, charges)
            self.model.AddMaxEquality(charge_max, charges)

            dispersion = self.model.NewIntVar(0, len(seances), "dispersion")
            self.model.Add(dispersion == charge_max - charge_min)

        # COMPOSANTE 2.5: √âquilibre par grade (NOUVEAU - IMPORTANT)
        # Minimiser la somme des dispersions dans chaque grade
        dispersion_grades = None
        if hasattr(self, "dispersions_par_grade") and self.dispersions_par_grade:
            nb_grades = len(self.dispersions_par_grade)
            max_quota = max(
                [
                    config.get("nb_surveillances", 5)
                    for config in self.grade_configs.values()
                ]
            )

            dispersion_grades = self.model.NewIntVar(
                0,
                nb_grades * max_quota,  # Somme max des dispersions
                "dispersion_grades",
            )
            self.model.Add(
                dispersion_grades == sum(self.dispersions_par_grade.values())
            )

        # COMPOSANTE 3: P√©nalit√© pour v≈ìux de NON-disponibilit√© (SECONDAIRE)
        # On veut MINIMISER le nombre d'affectations sur des cr√©neaux non-souhait√©s
        penalite_voeux = None
        if preferences_voeux and preferences_voeux.get("avec_voeu"):
            # Compter le nombre d'affectations sur cr√©neaux avec v≈ìu de non-disponibilit√©
            affectations_avec_voeu = [
                affectations_vars[(seance_key, ens_id)]
                for seance_key, ens_id in preferences_voeux["avec_voeu"]
                if (seance_key, ens_id) in affectations_vars
            ]

            if affectations_avec_voeu:
                penalite_voeux = self.model.NewIntVar(
                    0, len(affectations_avec_voeu), "penalite_voeux"
                )
                self.model.Add(penalite_voeux == sum(affectations_avec_voeu))

        # COMPOSANTE 4: √âquilibre temporel (si activ√©)
        if equilibrer_temporel:
            self._ajouter_equilibre_temporel(affectations_vars, seances, enseignants)

        # OBJECTIF COMBIN√â: Maximiser total_affectations, minimiser dispersion globale et par grade,
        # maximiser bonus_consecutivite (optionnel), MINIMISER penalite_voeux
        #
        # Avec regroupement temporel:
        # Score = 35*total_affectations - 25*dispersion - 20*dispersion_grades + 10*bonus_consecutivite - 10*penalite_voeux
        #
        # Sans regroupement temporel:
        # Score = 40*total_affectations - 30*dispersion - 20*dispersion_grades - 10*penalite_voeux
        #
        # Le solveur maximise, donc on veut:
        # - Maximiser total_affectations (positif) - PRIORIT√â 1
        # - Minimiser dispersion globale (n√©gatif) - PRIORIT√â 2
        # - Minimiser dispersion par grade (n√©gatif) - PRIORIT√â 3
        # - Maximiser bonus regroupement (positif) - Bonus l√©ger (si activ√©)
        # - Minimiser penalite_voeux (n√©gatif) - P√©naliser les affectations sur cr√©neaux non-souhait√©s

        # Construction de la fonction objectif selon les composantes disponibles
        composantes = []
        poids = []

        if total_affectations is not None:
            composantes.append(total_affectations)
            # Poids ajust√© selon si regroupement temporel activ√©
            poids.append(35 if activer_regroupement_temporel else 40)

        if dispersion is not None:
            composantes.append(dispersion)
            # Poids ajust√© selon si regroupement temporel activ√©
            poids.append(-25 if activer_regroupement_temporel else -30)

        if dispersion_grades is not None:
            composantes.append(dispersion_grades)
            poids.append(-20)  # Poids -20% (minimiser) - IMPORTANT

        if activer_regroupement_temporel and bonus_consecutivite is not None:
            composantes.append(bonus_consecutivite)
            poids.append(10)  # Poids 10% - Bonus secondaire (seulement si activ√©)

        if penalite_voeux is not None:
            composantes.append(penalite_voeux)
            poids.append(-10)  # Poids -10% - P√âNALIT√â pour v≈ìux de non-disponibilit√© (minimiser)

        if composantes:
            # Calculer les bornes du score combin√©
            min_score = sum([p for p in poids if p < 0]) * len(seances) * 10
            max_score = (
                sum([p for p in poids if p > 0]) * len(enseignants) * len(seances)
            )

            score_combine = self.model.NewIntVar(min_score, max_score, "score_combine")

            # Construire l'expression du score
            expression = sum(
                [poids[i] * composantes[i] for i in range(len(composantes))]
            )
            self.model.Add(score_combine == expression)
            self.model.Maximize(score_combine)
            return score_combine

        return None

    def _ajouter_equilibre_temporel(
        self, affectations_vars: Dict, seances: Dict, enseignants: List[Enseignant]
    ):
        """
        Ajoute des contraintes pour √©quilibrer temporellement les affectations.
        √âvite qu'un enseignant soit toujours affect√© aux m√™mes cr√©neaux horaires.
        """

        # Grouper les s√©ances par code horaire (S1, S2, S3, S4)
        seances_par_code = {"S1": [], "S2": [], "S3": [], "S4": []}

        for seance_key in seances.keys():
            seance_code = seance_key[1]  # S1, S2, S3 ou S4
            if seance_code in seances_par_code:
                seances_par_code[seance_code].append(seance_key)

        # Pour chaque enseignant, √©quilibrer ses affectations entre cr√©neaux
        for enseignant in enseignants:
            affectations_par_creneau = {}

            for code, seances_code in seances_par_code.items():
                if seances_code:
                    nb_aff_creneau = sum(
                        [
                            affectations_vars[(seance_key, enseignant.id)]
                            for seance_key in seances_code
                        ]
                    )
                    affectations_par_creneau[code] = nb_aff_creneau

            # Contrainte souple: √âviter qu'un enseignant ait toutes ses affectations dans un seul cr√©neau
            # (Ceci est une contrainte souple, elle influence mais ne bloque pas)
            if len(affectations_par_creneau) > 1:
                valeurs = list(affectations_par_creneau.values())
                # On ne rajoute pas de contrainte stricte, c'est g√©r√© par l'√©quilibre global
                pass

    # ========== SAUVEGARDE ==========

    def _sauvegarder_affectations_par_seance(
        self,
        affectations_vars: Dict,
        seances: Dict,
        enseignants: List[Enseignant],
        responsables_examens: Dict[int, int],
    ) -> int:
        """
        Sauvegarde les affectations dans la base de donn√©es.
        Pour chaque s√©ance, duplique les enseignants affect√©s pour chaque examen.
        Marque le responsable de l'examen avec est_responsable=True.
        Le responsable compte dans les quotas et peut surveiller d'autres examens.
        """
        nb_affectations = 0

        for seance_key, examens_seance in seances.items():
            # Trouver les enseignants affect√©s √† cette s√©ance
            enseignants_affectes = []

            for enseignant in enseignants:
                var = affectations_vars[(seance_key, enseignant.id)]
                if self.solver.Value(var) == 1:
                    enseignants_affectes.append(enseignant)

            # Pour chaque examen de cette s√©ance
            for examen in examens_seance:
                responsable_id = responsables_examens.get(examen.id, None)

                # Cr√©er une affectation pour chaque enseignant affect√©
                for enseignant in enseignants_affectes:
                    # Marquer si cet enseignant est le responsable de CET examen
                    est_responsable = enseignant.id == responsable_id

                    affectation = Affectation(
                        examen_id=examen.id,
                        enseignant_id=enseignant.id,
                        cod_salle=examen.cod_salle,
                        est_responsable=est_responsable,
                    )
                    self.db.add(affectation)
                    nb_affectations += 1

        self.db.commit()
        return nb_affectations

    # ========== M√âTHODES UTILITAIRES ==========

    def _identifier_responsables(self, examens: List[Examen]) -> Dict[int, int]:
        """
        Identifie les responsables d'examens.
        Le champ 'enseignant' du mod√®le Examen contient le code smartex du responsable.
        """
        responsables = {}

        for examen in examens:
            if hasattr(examen, "enseignant") and examen.enseignant:
                # Le champ enseignant contient le code smartex
                enseignant = (
                    self.db.query(Enseignant)
                    .filter(Enseignant.code_smartex == examen.enseignant)
                    .first()
                )

                if enseignant:
                    responsables[examen.id] = enseignant.id
                else:
                    # Log si le code smartex n'est pas trouv√©
                    date_str = examen.dateExam.strftime("%d/%m/%Y")
                    time_str = f"{examen.h_debut.strftime('%H:%M')}-{examen.h_fin.strftime('%H:%M')}"
                    self.warnings.append(
                        f"‚ö†Ô∏è Enseignant responsable non trouv√© (code '{examen.enseignant}') - Examen du {date_str} de {time_str} en salle {examen.cod_salle}"
                    )

        return responsables

    def _get_seance_code_from_time(self, heure: dt_time) -> str:
        """D√©termine le code de s√©ance (S1, S2, S3, S4) selon l'heure"""
        hour = heure.hour
        minute = heure.minute
        time_in_minutes = hour * 60 + minute

        # S1: 08:30-10:00
        if 510 <= time_in_minutes < 630:  # 08:30 = 510 min
            return "S1"
        # S2: 10:30-12:00
        elif 630 <= time_in_minutes < 750:  # 10:30 = 630 min
            return "S2"
        # S3: 12:30-14:00
        elif 750 <= time_in_minutes < 870:  # 12:30 = 750 min
            return "S3"
        # S4: 14:30-16:00
        elif 870 <= time_in_minutes < 1020:  # 14:30 = 870 min
            return "S4"
        else:
            # Par d√©faut
            if hour < 12:
                return "S1"
            else:
                return "S3"

    def _seance_to_index(self, seance_val) -> int:
        """Mappe une valeur de s√©ance (S1,S2,.., 'Matin', 'Apr√®s-midi'...) en indice pour trier."""
        if seance_val is None:
            return 99
        s = str(seance_val).upper()
        if s in ("S1", "1", "08:30", "08:30-10:00", "MATIN", "M"):
            return 1
        if s in ("S2", "2", "10:30", "10:30-12:00"):
            return 2
        if s in ("S3", "3", "12:30", "12:30-14:00", "APRES-MIDI", "APRES MIDI"):
            return 3
        if s in ("S4", "4", "14:30", "14:30-16:00"):
            return 4
        if "MATIN" in s:
            return 1
        if "APRES" in s:
            return 3
        if s.startswith("S") and len(s) > 1 and s[1].isdigit():
            try:
                return int(s[1])
            except Exception:
                return 99
        return 99

    def _trier_et_afficher_voeux(self, voeux: List[Voeu]) -> list:
        """Trie la liste des voeux par date puis par s√©ance et retourne une liste de dictionnaires d'attributs pour chaque voeu."""

        def _voeu_sort_key(voeu):
            date_voeu = getattr(voeu, "date_voeu", None)
            seance_val = getattr(voeu, "seance_indisponible", None) or getattr(
                voeu, "seance", None
            )
            seance_idx = self._seance_to_index(seance_val)
            code_smartex = getattr(voeu, "code_smartex_ens", None)
            rel_enseignant = getattr(voeu, "enseignant", None)
            rel_code = None
            if isinstance(rel_enseignant, str):
                rel_code = rel_enseignant
            elif hasattr(rel_enseignant, "code_smartex"):
                rel_code = getattr(rel_enseignant, "code_smartex")
            sort_ident = (
                code_smartex
                if code_smartex is not None
                else (rel_code if rel_code is not None else "")
            )
            # Utiliser date_voeu ou une date par d√©faut si absente
            date_sort = date_voeu if date_voeu else date(1900, 1, 1)
            return (date_sort, seance_idx, sort_ident)

        try:
            voeux.sort(key=_voeu_sort_key)
        except Exception:
            return []

        result = []
        for v in voeux:
            date_voeu = getattr(v, "date_voeu", None)
            seance_val = getattr(v, "seance_indisponible", None) or getattr(
                v, "seance", None
            )
            code_smartex = getattr(v, "code_smartex_ens", None)
            rel_enseignant = getattr(v, "enseignant", None)
            if isinstance(rel_enseignant, str):
                rel_code = rel_enseignant
            elif hasattr(rel_enseignant, "code_smartex"):
                rel_code = getattr(rel_enseignant, "code_smartex")
            else:
                rel_code = None

            ident = code_smartex if code_smartex else (rel_code if rel_code else None)

            nom = None
            try:
                if code_smartex:
                    ense = (
                        self.db.query(Enseignant)
                        .filter(Enseignant.code_smartex == code_smartex)
                        .first()
                    )
                    if ense:
                        nom = ense.nom
                elif rel_code:
                    ense = (
                        self.db.query(Enseignant)
                        .filter(Enseignant.code_smartex == rel_code)
                        .first()
                    )
                    nom = ense.nom if ense else None
            except Exception:
                nom = None

            heure = None
            if hasattr(v, "heure") and getattr(v, "heure"):
                heure = getattr(v, "heure")
            else:
                s = str(seance_val).upper() if seance_val is not None else ""
                if "S1" in s:
                    heure = "08:30"
                elif "S2" in s:
                    heure = "10:30"
                elif "S3" in s:
                    heure = "12:30"
                elif "S4" in s:
                    heure = "14:30"

            result.append(
                {
                    "id": ident,
                    "nom": nom,
                    "date_voeu": date_voeu,
                    "seance": seance_val,
                    "heure": heure,
                }
            )
        return result

    def _grouper_examens_par_seance(
        self, examens: List[Examen]
    ) -> Dict[Tuple, List[Examen]]:
        """
        Groupe les examens par s√©ance unique et trie par date puis par s√©ance (S1 √† S4).
        Une s√©ance = (date, seance_code, semestre, session, jour_index)
        o√π jour_index est un num√©ro s√©quentiel (1, 2, 3, ...) pour chaque journ√©e unique.
        """
        seances = {}

        for examen in examens:
            seance_code = self._get_seance_code_from_time(examen.h_debut)
            seance_key = (examen.dateExam, seance_code, examen.semestre, examen.session)

            if seance_key not in seances:
                seances[seance_key] = []

            seances[seance_key].append(examen)

        # Trier les s√©ances par date puis par code de s√©ance (S1, S2, S3, S4)
        def _seance_sort_key(seance_key):
            date_exam, seance_code, semestre, session = seance_key
            # Mapper les codes de s√©ance en indices num√©riques pour le tri
            seance_order = {"S1": 1, "S2": 2, "S3": 3, "S4": 4}
            seance_index = seance_order.get(seance_code, 99)
            return (date_exam, seance_index, semestre, session)

        # Cr√©er un dictionnaire tri√©
        seances_triees_temp = dict(
            sorted(seances.items(), key=lambda item: _seance_sort_key(item[0]))
        )

        # Ajouter l'index de jour (num√©rotation s√©quentielle des journ√©es)
        seances_avec_index_jour = {}
        dates_uniques = []
        date_to_jour_index = {}

        # Identifier les dates uniques dans l'ordre
        for seance_key in seances_triees_temp.keys():
            date_exam = seance_key[0]
            if date_exam not in dates_uniques:
                dates_uniques.append(date_exam)
                date_to_jour_index[date_exam] = len(dates_uniques)  # Index commence √† 1

        # Recr√©er les cl√©s avec l'index de jour
        for seance_key, examens_list in seances_triees_temp.items():
            date_exam, seance_code, semestre, session = seance_key
            jour_index = date_to_jour_index[date_exam]

            # Nouvelle cl√© avec l'index de jour
            nouvelle_cle = (date_exam, seance_code, semestre, session, jour_index)
            seances_avec_index_jour[nouvelle_cle] = examens_list

        return seances_avec_index_jour

    # ========== V√âRIFICATIONS ET STATISTIQUES ==========

    def _verifier_couverture_seances(self, seances: Dict, besoins_par_seance: Dict):
        """V√©rifie que toutes les s√©ances sont correctement couvertes"""

        for seance_key, examens_seance in seances.items():
            nb_examens = len(examens_seance)
            nb_requis = besoins_par_seance.get(seance_key, 0)

            # Compter les affectations r√©elles
            nb_affectations = (
                self.db.query(Affectation)
                .filter(Affectation.examen_id.in_([ex.id for ex in examens_seance]))
                .count()
            )

            nb_enseignants_uniques = len(
                set(
                    [
                        aff.enseignant_id
                        for aff in self.db.query(Affectation)
                        .filter(
                            Affectation.examen_id.in_([ex.id for ex in examens_seance])
                        )
                        .all()
                    ]
                )
            )

            if nb_enseignants_uniques < nb_requis:
                self.warnings.append(
                    f"‚ö†Ô∏è S√©ance {seance_key[1]} du {seance_key[0].strftime('%d/%m')}: "
                    f"{nb_enseignants_uniques} enseignants affect√©s (requis: {nb_requis})"
                )

    def _generer_statistiques(
        self, enseignants: List[Enseignant], seances: Dict, affectations_vars: Dict
    ):
        """G√©n√®re des statistiques sur la solution trouv√©e"""
        # Cette m√©thode est conserv√©e pour compatibilit√© mais n'affiche plus de messages
        # Les statistiques importantes (v≈ìux) sont g√©r√©es par _generer_statistiques_voeux
        pass



    def _generer_statistiques_voeux(
        self, 
        affectations_vars: Dict, 
        preferences_voeux: Dict,
        enseignants: List[Enseignant],
        nb_list_voeux: int
    ):
        """
        G√©n√®re des statistiques d√©taill√©es sur le respect des v≈ìux de non-disponibilit√©.
        
        Args:
            affectations_vars: Variables d'affectation du mod√®le
            preferences_voeux: Dictionnaire avec 'avec_voeu' (√† √©viter) et 'sans_voeu'
            enseignants: Liste des enseignants
            nb_list_voeux: Nombre total de v≈ìux exprim√©s dans la base
        """
        print("\nüéØ Statistiques sur les v≈ìux de non-disponibilit√©:")
        
        # R√©cup√©rer les affectations sur cr√©neaux avec v≈ìux de non-disponibilit√©
        affectations_avec_voeu = preferences_voeux.get("avec_voeu", [])
        
        if not affectations_avec_voeu:
            print("   ‚úÖ Aucun v≈ìu de non-disponibilit√© √† g√©rer dans le planning")
            self.infos.append("\n" + "=" * 80)
            self.infos.append("üéØ STATISTIQUES DES V≈íUX DE NON-DISPONIBILIT√â")
            self.infos.append("=" * 80)
            self.infos.append("")
            self.infos.append("‚úÖ Aucun v≈ìu de non-disponibilit√© √† g√©rer dans le planning actuel")
            if nb_list_voeux > 0:
                self.infos.append(f"‚ÑπÔ∏è  Total de v≈ìux exprim√©s dans la base: {nb_list_voeux}")
                self.infos.append("‚ÑπÔ∏è  Ces v≈ìux concernent probablement des cr√©neaux hors du planning actuel")
            self.infos.append("")
            self.infos.append("=" * 80)
            return
        
        # Compter le nombre total de v≈ìux concernant le planning
        nb_total_voeux_planning = len(affectations_avec_voeu)
        
        # Compter combien de v≈ìux ont √©t√© viol√©s (enseignant affect√© sur cr√©neau non-souhait√©)
        nb_voeux_violes = 0
        nb_voeux_respectes = 0
        
        voeux_violes_details = []
        
        for seance_key, enseignant_id in affectations_avec_voeu:
            var = affectations_vars.get((seance_key, enseignant_id))
            if var is not None:
                if self.solver.Value(var) == 1:
                    # L'enseignant a √©t√© affect√© sur un cr√©neau qu'il ne souhaitait pas
                    nb_voeux_violes += 1
                    
                    # Trouver les infos de l'enseignant
                    enseignant = next((e for e in enseignants if e.id == enseignant_id), None)
                    if enseignant:
                        date_exam, seance_code, semestre, session, jour_index = seance_key
                        voeux_violes_details.append({
                            'enseignant': f"{enseignant.nom} {enseignant.prenom}",
                            'code': enseignant.code_smartex,
                            'date': date_exam.strftime('%d/%m/%Y'),
                            'seance': seance_code,
                            'semestre': semestre,
                            'session': session,
                            'jour': jour_index
                        })
                else:
                    # Le v≈ìu a √©t√© respect√© (enseignant non affect√© sur ce cr√©neau)
                    nb_voeux_respectes += 1
        
        # Calcul des v≈ìux hors planning : total des v≈ìux exprim√©s - v≈ìux match√©s dans le planning
        nb_voeux_hors_planning = nb_list_voeux - nb_total_voeux_planning

        nb_voeux_respectes=nb_voeux_respectes+nb_voeux_hors_planning
        # Calculer les pourcentages
        pourcentage_respectes = (nb_voeux_respectes / nb_list_voeux * 100) if nb_list_voeux > 0 else 100
        pourcentage_violes = (nb_voeux_violes / nb_list_voeux * 100) if nb_list_voeux > 0 else 0
        
        # Affichage console simplifi√©
        print(f"   ‚úÖ V≈ìux respect√©s: {nb_voeux_respectes} ({pourcentage_respectes:.1f}%)")
        print(f"   ‚ö†Ô∏è V≈ìux viol√©s: {nb_voeux_violes} ({pourcentage_violes:.1f}%)")
        
        # Affichage d√©taill√© pour l'interface (self.infos)
        self.infos.append("\n" + "=" * 80)
        self.infos.append("üéØ STATISTIQUES DES V≈íUX DE NON-DISPONIBILIT√â")
        self.infos.append("=" * 80)
        self.infos.append("")
        
     
        
        # R√©sultats avec emoji et couleurs
        self.infos.append("üìà R√âSULTATS:")
        self.infos.append(f"   ‚úÖ V≈ìux respect√©s: {nb_voeux_respectes} ({pourcentage_respectes:.1f}%)")
        self.infos.append(f"   ‚ö†Ô∏è V≈ìux viol√©s: {nb_voeux_violes} ({pourcentage_violes:.1f}%)")
        self.infos.append("")
        
        # Si des v≈ìux ont √©t√© viol√©s, afficher TOUS les d√©tails
        if nb_voeux_violes > 0:
            self.infos.append("-" * 80)
            self.infos.append(f"‚ö†Ô∏è LISTE COMPL√àTE DES {nb_voeux_violes} V≈íUX NON RESPECT√âS:")
            self.infos.append("-" * 80)
            self.infos.append("")
            self.infos.append("Ces enseignants ont √©t√© affect√©s sur des cr√©neaux qu'ils ne souhaitaient pas:")
            self.infos.append("")
            
            # Trier par date, puis par s√©ance, puis par nom
            voeux_violes_details.sort(key=lambda x: (x['date'], x['seance'], x['enseignant']))
            
            for i, detail in enumerate(voeux_violes_details, 1):
                self.infos.append(
                    f"   {i:3d}. {detail['enseignant']:35s} | Code: {detail['code']:12s} | "
                    f"Date: {detail['date']:10s} | S√©ance: {detail['seance']:3s} | "
                    f"{detail['semestre']} - {detail['session']}"
                )
            
