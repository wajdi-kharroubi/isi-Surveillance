"""
Algorithme d'Optimisation Avanc√© pour la G√©n√©ration des Plannings de Surveillance
Version 2.0 - Respect complet des r√®gles de contraintes et priorit√©s
"""

from ortools.sat.python import cp_model
from sqlalchemy.orm import Session, joinedload
from models.models import Enseignant, Examen, Affectation, Voeu, GradeConfig
from datetime import datetime, date, time as dt_time
from typing import List, Dict, Tuple, Set
import time


class SurveillanceOptimizerV2:
    """
    Algorithme d'optimisation avanc√© avec gestion compl√®te des contraintes et priorit√©s.
    
    R√àGLES DE BASE (Contraintes fortes - HARD):
    1. Responsable d'examen doit √™tre pr√©sent et compte dans les quotas
    2. Charge obligatoire √©gale par grade (quota fixe)
    3. Non-conflit horaire
    4. Nombre minimal d'enseignants par cr√©neau
    
    R√àGLES DE PR√âF√âRENCE (Contraintes souples - SOFT):
    1. Pr√©f√©rence pour enseignants avec v≈ìux de disponibilit√© (mais autres accept√©s)
    2. √âquilibre temporel (√©viter toujours premiers/derniers cr√©neaux)
    3. √âquilibre global entre enseignants
    
    PRIORIT√â DES CONTRAINTES:
    1. Pr√©sence du responsable d'examen (peut surveiller d'autres examens)
    2. Nombre minimal par examen
    3. Quota obligatoire fixe et √©gal par grade
    4. PR√âF√âRENCE pour v≈ìux (pas obligatoire, mais bonus dans fonction objectif)
    5. √âquilibre global
    """
    
    def __init__(self, db: Session):
        self.db = db
        self.model = cp_model.CpModel()
        self.solver = cp_model.CpSolver()
        self.warnings = []
        self.infos = []
        
        # Charger la configuration des grades depuis la BDD
        self.grade_configs = self._load_grade_configs()
        
        # Scores pour l'optimisation
        self.score_components = {
            'respect_voeux': 0,
            'equilibre_global': 0,
            'equilibre_temporel': 0,
            'quota_respecte': 0
        }
        
    def _load_grade_configs(self) -> Dict[str, Dict]:
        """
        Charge les configurations de grades avec quotas FIXES.
        
        IMPORTANT: Tous les enseignants d'un m√™me grade font le m√™me nombre 
        de s√©ances (quota fixe).
        """
        configs = self.db.query(GradeConfig).all()
        grade_dict = {}
        
        for config in configs:
            # Le quota fixe est d√©fini par nb_surveillances
            quota_fixe = config.nb_surveillances
            
            grade_dict[config.grade_code] = {
                'nb_surveillances': quota_fixe,    # Quota FIXE pour ce grade
                'label': config.grade_nom           # Nom du grade
            }
        
        return grade_dict
    
    def generer_planning_optimise(
        self,
        min_surveillants_par_examen: int = 2,
        allow_fallback: bool = True,
        respecter_voeux: bool = True,
        equilibrer_temporel: bool = True
    ) -> Tuple[bool, int, float, List[str], Dict]:
        """
        G√©n√®re le planning optimal avec respect de toutes les contraintes.
        
        Args:
            min_surveillants_par_examen: Nombre minimum de surveillants par examen
            allow_fallback: Autoriser le fallback √† 1 surveillant si n√©cessaire
            respecter_voeux: Prendre en compte les v≈ìux (True fortement recommand√©)
            equilibrer_temporel: √âquilibrer la r√©partition des cr√©neaux horaires
            
        Returns:
            (success, nb_affectations, temps_execution, messages, scores)
        """
        start_time = time.time()
        
        print("=" * 80)
        print("üöÄ D√âMARRAGE DE L'ALGORITHME D'OPTIMISATION V2.0")
        print("=" * 80)
        
        # ===== PHASE 1: R√âCUP√âRATION DES DONN√âES =====
        print("\nüìä Phase 1: R√©cup√©ration des donn√©es...")
        
        enseignants = self.db.query(Enseignant).filter(
            Enseignant.participe_surveillance == True
        ).all()
        
        examens = self.db.query(Examen).all()
        voeux = self.db.query(Voeu).all() if respecter_voeux else []
        
        print(f"   ‚úì {len(enseignants)} enseignants disponibles")
        print(f"   ‚úì {len(examens)} examens √† planifier")
        print(f"   ‚úì {len(voeux)} v≈ìux de non-disponibilit√©")
        
        # V√©rifications pr√©liminaires
        if not enseignants:
            self.warnings.append("‚ö†Ô∏è Aucun enseignant disponible pour la surveillance")
            return False, 0, 0.0, self.warnings, self.score_components
            
        if not examens:
            self.warnings.append("‚ö†Ô∏è Aucun examen √† planifier")
            return False, 0, 0.0, self.warnings, self.score_components
        
        # ===== PHASE 2: NETTOYAGE =====
        print("\nüóëÔ∏è  Phase 2: Nettoyage des anciennes affectations...")
        nb_supprimees = self.db.query(Affectation).delete()
        self.db.commit()
        print(f"   ‚úì {nb_supprimees} anciennes affectations supprim√©es")
        
        # ===== PHASE 3: GROUPEMENT PAR S√âANCE =====
        print("\nüóÇÔ∏è  Phase 3: Groupement des examens par s√©ance...")
        seances = self._grouper_examens_par_seance(examens)
        print(f"   ‚úì {len(seances)} s√©ances identifi√©es")
        
        if not seances:
            self.warnings.append("‚ö†Ô∏è Aucune s√©ance d'examen trouv√©e")
            return False, 0, 0.0, self.warnings, self.score_components
        
        # Afficher les s√©ances
        for idx, (seance_key, examens_seance) in enumerate(seances.items(), 1):
            date_exam, seance_code, semestre, session = seance_key
            print(f"   ‚Ä¢ S√©ance {idx}: {date_exam.strftime('%d/%m/%Y')} - {seance_code} - {semestre} - {session} ({len(examens_seance)} examens)")
        
        # ===== PHASE 4: ANALYSE DES RESPONSABLES D'EXAMENS =====
        print("\nüë• Phase 4: Identification des responsables d'examens...")
        responsables_examens = self._identifier_responsables(examens)
        print(f"   ‚úì {len(responsables_examens)} examens avec responsable identifi√©")
        
        # ===== PHASE 5: CR√âATION DES VARIABLES DE D√âCISION =====
        print("\nüî¢ Phase 5: Cr√©ation des variables de d√©cision...")
        
        # Variables: enseignant affect√© √† une s√©ance
        affectations_vars = {}
        for seance_key in seances.keys():
            for enseignant in enseignants:
                var_name = f"aff_{seance_key[0].strftime('%Y%m%d')}_{seance_key[1]}_{seance_key[2]}_{seance_key[3]}_ens_{enseignant.id}"
                affectations_vars[(seance_key, enseignant.id)] = self.model.NewBoolVar(var_name)
        
        print(f"   ‚úì {len(affectations_vars)} variables bool√©ennes cr√©√©es")
        
        # ===== PHASE 6: APPLICATION DES CONTRAINTES =====
        print("\nüîí Phase 6: Application des contraintes...")
        
        # CONTRAINTE 1: Pr√©sence obligatoire des responsables (PRIORIT√â 1)
        print("   ‚Üí Contrainte 1: Pr√©sence obligatoire des responsables d'examens")
        nb_contraintes_responsables = self._contrainte_responsables(
            responsables_examens, seances, affectations_vars, enseignants
        )
        print(f"      ‚úì {nb_contraintes_responsables} responsables ajout√©s obligatoirement (peuvent surveiller d'autres examens)")
        
        # CONTRAINTE 2: Nombre minimal d'enseignants par s√©ance (PRIORIT√â 2)
        print("   ‚Üí Contrainte 2: Nombre minimal d'enseignants par s√©ance")
        besoins_par_seance = self._contrainte_nombre_minimal(
            seances, enseignants, affectations_vars, 
            min_surveillants_par_examen, allow_fallback
        )
        print(f"      ‚úì Contraintes de couverture appliqu√©es")
        
        # CONTRAINTE 3: Quota obligatoire par grade (PRIORIT√â 3)
        print("   ‚Üí Contrainte 3: Quotas obligatoires et limites par grade")
        charge_par_enseignant = self._contrainte_quotas_grades(
            enseignants, seances, affectations_vars
        )
        print(f"      ‚úì Quotas de grades configur√©s")
        
        # CONTRAINTE 4: Pr√©f√©rence pour les v≈ìux (PRIORIT√â 4)
        preferences_voeux = {}
        if respecter_voeux and voeux:
            print("   ‚Üí Contrainte 4: Pr√©f√©rence pour les enseignants avec v≈ìux de disponibilit√©")
            preferences_voeux = self._contrainte_voeux(
                voeux, seances, enseignants, affectations_vars
            )
            nb_avec_voeu = len(preferences_voeux.get('avec_voeu', []))
            nb_sans_voeu = len(preferences_voeux.get('sans_voeu', []))
            print(f"      ‚úì {nb_avec_voeu} combinaisons avec v≈ìu (prioritaires)")
            print(f"      ‚úì {nb_sans_voeu} combinaisons sans v≈ìu (secondaires)")
        else:
            print("   ‚Üí Contrainte 4: V≈ìux d√©sactiv√©s")
        
        # CONTRAINTE 5: Non-conflit horaire (automatique avec s√©ances)
        print("   ‚Üí Contrainte 5: Non-conflit horaire (automatique)")
        print(f"      ‚úì Garanti par le syst√®me de s√©ances")
        
        # ===== PHASE 7: FONCTION OBJECTIF =====
        print("\nüéØ Phase 7: Configuration de la fonction objectif...")
        
        score_total = self._configurer_fonction_objectif(
            charge_par_enseignant,
            affectations_vars,
            seances,
            enseignants,
            equilibrer_temporel,
            preferences_voeux
        )
        
        print(f"      ‚úì Fonction objectif configur√©e (score d'optimisation)")
        
        # ===== PHASE 8: R√âSOLUTION =====
        print("\n‚ö° Phase 8: R√©solution du probl√®me...")
        self.solver.parameters.max_time_in_seconds = 60.0
        
        status = self.solver.Solve(self.model)
        
        # ===== PHASE 9: TRAITEMENT DES R√âSULTATS =====
        print("\nüìã Phase 9: Traitement des r√©sultats...")
        
        if status == cp_model.OPTIMAL:
            print("   ‚úÖ Solution OPTIMALE trouv√©e!")
            status_text = "OPTIMALE"
        elif status == cp_model.FEASIBLE:
            print("   ‚úÖ Solution R√âALISABLE trouv√©e")
            status_text = "R√âALISABLE"
        else:
            print("   ‚ùå Aucune solution trouv√©e")
            self.warnings.append("‚ùå Impossible de trouver une solution")
            self.warnings.append("Suggestions:")
            self.warnings.append("  ‚Ä¢ Ajouter des enseignants")
            self.warnings.append("  ‚Ä¢ R√©duire le nombre minimal de surveillants")
            self.warnings.append("  ‚Ä¢ V√©rifier les v≈ìux (trop de contraintes?)")
            self.warnings.append("  ‚Ä¢ Augmenter les quotas par grade")
            return False, 0, time.time() - start_time, self.warnings, self.score_components
        
        # Sauvegarder les affectations
        nb_affectations = self._sauvegarder_affectations_par_seance(
            affectations_vars,
            seances,
            enseignants,
            responsables_examens
        )
        
        execution_time = time.time() - start_time
        
        # ===== PHASE 10: V√âRIFICATIONS ET STATISTIQUES =====
        print("\nüìä Phase 10: V√©rifications et statistiques...")
        
        # Calculer les scores
        self._calculer_scores_solution(
            affectations_vars,
            seances,
            enseignants,
            voeux,
            charge_par_enseignant
        )
        
        # V√©rifications finales
        self._verifier_couverture_seances(seances, besoins_par_seance)
        self._generer_statistiques(enseignants, seances, affectations_vars)
        
        print("\n" + "=" * 80)
        print(f"‚úÖ G√âN√âRATION TERMIN√âE EN {execution_time:.2f}s - {nb_affectations} affectations cr√©√©es")
        print(f"üìä Statut: {status_text}")
        print("=" * 80)
        
        return True, nb_affectations, execution_time, self.warnings + self.infos, self.score_components
    
    # ========== CONTRAINTES ==========
    
    def _contrainte_responsables(
        self,
        responsables_examens: Dict[int, int],
        seances: Dict,
        affectations_vars: Dict,
        enseignants: List[Enseignant]
    ) -> int:
        """
        CONTRAINTE 1 (PRIORIT√â 1): Le responsable d'un examen doit √™tre pr√©sent.
        Le responsable PEUT surveiller d'autres examens pendant le m√™me cr√©neau.
        Il COMPTE dans les quotas de surveillance.
        """
        nb_contraintes = 0
        
        for seance_key, examens_seance in seances.items():
            for examen in examens_seance:
                if examen.id in responsables_examens:
                    responsable_id = responsables_examens[examen.id]
                    
                    # V√©rifier que le responsable existe dans les enseignants
                    if any(ens.id == responsable_id for ens in enseignants):
                        # OBLIGATION: Le responsable DOIT √™tre pr√©sent dans cette s√©ance
                        # Il sera automatiquement ajout√© et pourra surveiller d'autres examens
                        self.model.Add(affectations_vars[(seance_key, responsable_id)] == 1)
                        nb_contraintes += 1
        
        return nb_contraintes
    
    def _contrainte_nombre_minimal(
        self,
        seances: Dict,
        enseignants: List[Enseignant],
        affectations_vars: Dict,
        min_surveillants_par_examen: int,
        allow_fallback: bool
    ) -> Dict:
        """
        CONTRAINTE 2 (PRIORIT√â 2): Nombre minimum d'enseignants par s√©ance.
        Calcul: nb_examens √ó min_surveillants_par_examen
        Fallback: Si impossible, garantir au moins 1 enseignant par examen
        """
        besoins_par_seance = {}
        
        for seance_key, examens_seance in seances.items():
            nb_examens = len(examens_seance)
            nb_requis = nb_examens * min_surveillants_par_examen
            
            besoins_par_seance[seance_key] = nb_requis
            
            surveillants_pour_seance = [
                affectations_vars[(seance_key, ens.id)]
                for ens in enseignants
            ]
            
            # V√©rifier si suffisamment d'enseignants disponibles
            if nb_requis > len(enseignants):
                if allow_fallback:
                    # FALLBACK: Au moins nb_examens surveillants (1 par examen minimum)
                    nb_minimum = max(nb_examens, 1)
                    self.model.Add(sum(surveillants_pour_seance) >= nb_minimum)
                    
                    self.warnings.append(
                        f"‚ö†Ô∏è S√©ance {seance_key[1]} du {seance_key[0].strftime('%d/%m')}: "
                        f"Besoin de {nb_requis} mais seulement {len(enseignants)} disponibles. "
                        f"Fallback: {nb_minimum} surveillants minimum garantis."
                    )
                else:
                    # Sans fallback, on demande quand m√™me le maximum possible
                    self.model.Add(sum(surveillants_pour_seance) >= len(enseignants))
                    self.warnings.append(
                        f"‚ùå S√©ance {seance_key[1]}: Impossible de satisfaire le minimum requis"
                    )
            else:
                # Nombre normal: nb_requis surveillants
                self.model.Add(sum(surveillants_pour_seance) >= nb_requis)
        
        return besoins_par_seance
    
    def _contrainte_quotas_grades(
        self,
        enseignants: List[Enseignant],
        seances: Dict,
        affectations_vars: Dict
    ) -> Dict:
        """
        CONTRAINTE 3 (PRIORIT√â 3): Quota FIXE et √âGAL par grade.
        
        R√àGLE STRICTE: Tous les enseignants d'un m√™me grade doivent faire 
        EXACTEMENT le m√™me nombre de s√©ances de surveillance.
        
        Exemple: 
        - Tous les Professeurs font 5 s√©ances (ni 4, ni 6)
        - Tous les Assistants font 3 s√©ances (ni 2, ni 4)
        """
        charge_par_enseignant = {}
        
        # Grouper les enseignants par grade
        enseignants_par_grade = {}
        for enseignant in enseignants:
            if enseignant.grade_code not in enseignants_par_grade:
                enseignants_par_grade[enseignant.grade_code] = []
            enseignants_par_grade[enseignant.grade_code].append(enseignant)
        
        # Pour chaque grade, imposer un quota FIXE
        for grade_code, enseignants_grade in enseignants_par_grade.items():
            grade_config = self.grade_configs.get(grade_code, {
                'nb_surveillances': 2  # Par d√©faut, quota fixe = 2
            })
            
            # Le quota fixe est d√©fini par nb_surveillances
            quota_fixe = grade_config.get('nb_surveillances', 2)
            
            self.infos.append(
                f"   üìå Grade {grade_code}: Quota FIXE = {quota_fixe} s√©ances "
                f"pour {len(enseignants_grade)} enseignants"
            )
            
            # CONTRAINTE STRICTE: Chaque enseignant de ce grade fait EXACTEMENT quota_fixe s√©ances
            for enseignant in enseignants_grade:
                # Calculer la charge totale pour cet enseignant
                charge = sum([
                    affectations_vars[(seance_key, enseignant.id)]
                    for seance_key in seances.keys()
                ])
                
                charge_par_enseignant[enseignant.id] = charge
                
                # CONTRAINTE D'√âGALIT√â (pas de min/max, mais √©galit√© stricte)
                if len(seances) >= quota_fixe:
                    # Assez de s√©ances disponibles : on impose le quota exact
                    self.model.Add(charge == quota_fixe)
                else:
                    # Pas assez de s√©ances : on fait au mieux avec un warning
                    self.model.Add(charge >= 0)
                    self.warnings.append(
                        f"‚ö†Ô∏è Grade {grade_code}: Quota de {quota_fixe} s√©ances requis "
                        f"mais seulement {len(seances)} s√©ances disponibles"
                    )
        
        return charge_par_enseignant
    
    def _contrainte_voeux(
        self,
        voeux: List[Voeu],
        seances: Dict,
        enseignants: List[Enseignant],
        affectations_vars: Dict
    ) -> Dict:
        """
        CONTRAINTE 4 (PRIORIT√â 4): Pr√©f√©rence pour les v≈ìux de disponibilit√©.
        Les enseignants AVEC v≈ìu sont PRIORITAIRES mais les enseignants SANS v≈ìu 
        PEUVENT quand m√™me √™tre s√©lectionn√©s si n√©cessaire.
        
        Retourne un dictionnaire pour calculer les bonus/p√©nalit√©s dans la fonction objectif.
        """
        voeux_dict = self._construire_dict_voeux(voeux)
        preferences = {
            'avec_voeu': [],      # (seance_key, enseignant_id) pour bonus
            'sans_voeu': []       # (seance_key, enseignant_id) pour p√©nalit√©
        }
        
        for seance_key in seances.keys():
            date_exam, seance_code, semestre, session = seance_key
            jour = self._get_jour_from_date(date_exam)
            
            for enseignant in enseignants:
                if self._a_voeu(enseignant.id, jour, seance_code, semestre, session, voeux_dict):
                    # BONUS: Enseignant disponible (a d√©clar√© un v≈ìu)
                    preferences['avec_voeu'].append((seance_key, enseignant.id))
                else:
                    # P√âNALIT√â: Enseignant sans v≈ìu (mais peut quand m√™me √™tre affect√©)
                    preferences['sans_voeu'].append((seance_key, enseignant.id))
        
        return preferences
    
    # ========== FONCTION OBJECTIF ==========
    
    def _configurer_fonction_objectif(
        self,
        charge_par_enseignant: Dict,
        affectations_vars: Dict,
        seances: Dict,
        enseignants: List[Enseignant],
        equilibrer_temporel: bool,
        preferences_voeux: Dict = None
    ) -> cp_model.IntVar:
        """
        Configure la fonction objectif multi-crit√®res pour maximiser la satisfaction globale.
        
        Composantes du score:
        1. √âquilibre global de charge (minimiser dispersion) - POIDS: 60%
        2. Pr√©f√©rence pour enseignants avec v≈ìux - POIDS: 30%
        3. √âquilibre temporel (√©viter toujours premiers/derniers cr√©neaux) - POIDS: 10%
        """
        
        # COMPOSANTE 1: √âquilibre global de charge (PRINCIPAL)
        charges = list(charge_par_enseignant.values())
        
        if charges:
            charge_min = self.model.NewIntVar(0, len(seances), "charge_min")
            charge_max = self.model.NewIntVar(0, len(seances), "charge_max")
            
            self.model.AddMinEquality(charge_min, charges)
            self.model.AddMaxEquality(charge_max, charges)
            
            dispersion = self.model.NewIntVar(0, len(seances), "dispersion")
            self.model.Add(dispersion == charge_max - charge_min)
        else:
            dispersion = None
        
        # COMPOSANTE 2: Bonus pour enseignants avec v≈ìux (SECONDAIRE)
        bonus_voeux = None
        if preferences_voeux and preferences_voeux.get('avec_voeu'):
            # Compter le nombre d'affectations avec v≈ìu
            affectations_avec_voeu = [
                affectations_vars[(seance_key, ens_id)]
                for seance_key, ens_id in preferences_voeux['avec_voeu']
                if (seance_key, ens_id) in affectations_vars
            ]
            
            if affectations_avec_voeu:
                bonus_voeux = self.model.NewIntVar(0, len(affectations_avec_voeu), "bonus_voeux")
                self.model.Add(bonus_voeux == sum(affectations_avec_voeu))
        
        # COMPOSANTE 3: √âquilibre temporel (si activ√©)
        if equilibrer_temporel:
            self._ajouter_equilibre_temporel(
                affectations_vars,
                seances,
                enseignants
            )
        
        # OBJECTIF COMBIN√â: Minimiser dispersion ET maximiser bonus_voeux
        # On cr√©e un score combin√© avec poids appropri√©s
        if dispersion is not None and bonus_voeux is not None:
            # Score = -60*dispersion + 30*bonus_voeux
            # Le solveur maximise, donc on veut minimiser dispersion (n√©gatif) et maximiser bonus (positif)
            score_combine = self.model.NewIntVar(
                -60 * len(seances), 
                30 * len(affectations_vars), 
                "score_combine"
            )
            self.model.Add(score_combine == bonus_voeux - 2 * dispersion)
            self.model.Maximize(score_combine)
            return score_combine
        elif dispersion is not None:
            # Seulement la dispersion
            self.model.Minimize(dispersion)
            return dispersion
        
        return None
    
    def _ajouter_equilibre_temporel(
        self,
        affectations_vars: Dict,
        seances: Dict,
        enseignants: List[Enseignant]
    ):
        """
        Ajoute des contraintes pour √©quilibrer temporellement les affectations.
        √âvite qu'un enseignant soit toujours affect√© aux m√™mes cr√©neaux horaires.
        """
        
        # Grouper les s√©ances par code horaire (S1, S2, S3, S4)
        seances_par_code = {'S1': [], 'S2': [], 'S3': [], 'S4': []}
        
        for seance_key in seances.keys():
            seance_code = seance_key[1]  # S1, S2, S3 ou S4
            if seance_code in seances_par_code:
                seances_par_code[seance_code].append(seance_key)
        
        # Pour chaque enseignant, √©quilibrer ses affectations entre cr√©neaux
        for enseignant in enseignants:
            affectations_par_creneau = {}
            
            for code, seances_code in seances_par_code.items():
                if seances_code:
                    nb_aff_creneau = sum([
                        affectations_vars[(seance_key, enseignant.id)]
                        for seance_key in seances_code
                    ])
                    affectations_par_creneau[code] = nb_aff_creneau
            
            # Contrainte souple: √âviter qu'un enseignant ait toutes ses affectations dans un seul cr√©neau
            # (Ceci est une contrainte souple, elle influence mais ne bloque pas)
            if len(affectations_par_creneau) > 1:
                valeurs = list(affectations_par_creneau.values())
                # On ne rajoute pas de contrainte stricte, c'est g√©r√© par l'√©quilibre global
                pass
    
    # ========== SAUVEGARDE ==========
    
    def _sauvegarder_affectations_par_seance(
        self,
        affectations_vars: Dict,
        seances: Dict,
        enseignants: List[Enseignant],
        responsables_examens: Dict[int, int]
    ) -> int:
        """
        Sauvegarde les affectations dans la base de donn√©es.
        Pour chaque s√©ance, duplique les enseignants affect√©s pour chaque examen.
        Marque le responsable de l'examen avec est_responsable=True.
        Le responsable compte dans les quotas et peut surveiller d'autres examens.
        """
        nb_affectations = 0
        
        for seance_key, examens_seance in seances.items():
            # Trouver les enseignants affect√©s √† cette s√©ance
            enseignants_affectes = []
            
            for enseignant in enseignants:
                var = affectations_vars[(seance_key, enseignant.id)]
                if self.solver.Value(var) == 1:
                    enseignants_affectes.append(enseignant)
            
            # Pour chaque examen de cette s√©ance
            for examen in examens_seance:
                responsable_id = responsables_examens.get(examen.id, None)
                
                # Cr√©er une affectation pour chaque enseignant affect√©
                for enseignant in enseignants_affectes:
                    # Marquer si cet enseignant est le responsable de CET examen
                    est_responsable = (enseignant.id == responsable_id)
                    
                    affectation = Affectation(
                        examen_id=examen.id,
                        enseignant_id=enseignant.id,
                        cod_salle=examen.cod_salle,
                        est_responsable=est_responsable
                    )
                    self.db.add(affectation)
                    nb_affectations += 1
        
        self.db.commit()
        return nb_affectations
    
    # ========== M√âTHODES UTILITAIRES ==========
    
    def _identifier_responsables(self, examens: List[Examen]) -> Dict[int, int]:
        """
        Identifie les responsables d'examens.
        Le champ 'enseignant' du mod√®le Examen contient le code smartex du responsable.
        """
        responsables = {}
        
        for examen in examens:
            if hasattr(examen, 'enseignant') and examen.enseignant:
                # Le champ enseignant contient le code smartex
                enseignant = self.db.query(Enseignant).filter(
                    Enseignant.code_smartex == examen.enseignant
                ).first()
                
                if enseignant:
                    responsables[examen.id] = enseignant.id
                else:
                    # Log si le code smartex n'est pas trouv√©
                    self.warnings.append(f"‚ö†Ô∏è Code smartex '{examen.enseignant}' non trouv√© pour examen {examen.id}")
        
        return responsables
    
    def _get_seance_code_from_time(self, heure: dt_time) -> str:
        """D√©termine le code de s√©ance (S1, S2, S3, S4) selon l'heure"""
        hour = heure.hour
        minute = heure.minute
        time_in_minutes = hour * 60 + minute
        
        # S1: 08:30-10:00
        if 510 <= time_in_minutes < 630:  # 08:30 = 510 min
            return "S1"
        # S2: 10:30-12:00
        elif 630 <= time_in_minutes < 750:  # 10:30 = 630 min
            return "S2"
        # S3: 12:30-14:00
        elif 750 <= time_in_minutes < 870:  # 12:30 = 750 min
            return "S3"
        # S4: 14:30-16:00
        elif 870 <= time_in_minutes < 1020:  # 14:30 = 870 min
            return "S4"
        else:
            # Par d√©faut
            if hour < 12:
                return "S1"
            else:
                return "S3"
    
    def _get_jour_from_date(self, date_exam: date) -> int:
        """Extrait le num√©ro du jour"""
        return date_exam.day
    
    def _grouper_examens_par_seance(self, examens: List[Examen]) -> Dict[Tuple, List[Examen]]:
        """
        Groupe les examens par s√©ance unique.
        Une s√©ance = (date, seance_code, semestre, session)
        """
        seances = {}
        
        for examen in examens:
            seance_code = self._get_seance_code_from_time(examen.h_debut)
            seance_key = (
                examen.dateExam,
                seance_code,
                examen.semestre,
                examen.session
            )
            
            if seance_key not in seances:
                seances[seance_key] = []
            
            seances[seance_key].append(examen)
        
        return seances
    
    def _construire_dict_voeux(self, voeux: List[Voeu]) -> Dict:
        """Construit un dictionnaire de v≈ìux pour recherche rapide"""
        voeux_dict = {}
        
        for voeu in voeux:
            jour = voeu.date_indisponible.day if hasattr(voeu, 'date_indisponible') else voeu.jour
            seance = voeu.seance_indisponible if hasattr(voeu, 'seance_indisponible') else voeu.seance
            
            # R√©cup√©rer semestre et session avec les bons noms d'attributs
            semestre = voeu.semestre_code_libelle if hasattr(voeu, 'semestre_code_libelle') else None
            session = voeu.session_libelle if hasattr(voeu, 'session_libelle') else None
            
            # Normaliser le code de s√©ance
            if seance in ["Matin", "MATIN"]:
                seances_codes = ["S1", "S2"]
            elif seance in ["Apr√®s-midi", "APRES-MIDI"]:
                seances_codes = ["S3", "S4"]
            else:
                seances_codes = [seance]  # S1, S2, S3, S4 directement
            
            for seance_code in seances_codes:
                # Note : semestre et session peuvent √™tre None si non sp√©cifi√©s dans le v≈ìu
                cle = (voeu.enseignant_id, jour, seance_code, semestre, session)
                voeux_dict[cle] = True
        
        return voeux_dict
    
    def _a_voeu(
        self,
        enseignant_id: int,
        jour: int,
        seance_code: str,
        semestre: str,
        session: str,
        voeux_dict: Dict
    ) -> bool:
        """V√©rifie si un enseignant a un v≈ìu pour un cr√©neau pr√©cis"""
        cle = (enseignant_id, jour, seance_code, semestre, session)
        return cle in voeux_dict
    
    # ========== V√âRIFICATIONS ET STATISTIQUES ==========
    
    def _verifier_couverture_seances(self, seances: Dict, besoins_par_seance: Dict):
        """V√©rifie que toutes les s√©ances sont correctement couvertes"""
        
        for seance_key, examens_seance in seances.items():
            nb_examens = len(examens_seance)
            nb_requis = besoins_par_seance.get(seance_key, 0)
            
            # Compter les affectations r√©elles
            nb_affectations = self.db.query(Affectation).filter(
                Affectation.examen_id.in_([ex.id for ex in examens_seance])
            ).count()
            
            nb_enseignants_uniques = len(set([
                aff.enseignant_id for aff in self.db.query(Affectation).filter(
                    Affectation.examen_id.in_([ex.id for ex in examens_seance])
                ).all()
            ]))
            
            if nb_enseignants_uniques < nb_requis:
                self.warnings.append(
                    f"‚ö†Ô∏è S√©ance {seance_key[1]} du {seance_key[0].strftime('%d/%m')}: "
                    f"{nb_enseignants_uniques} enseignants affect√©s (requis: {nb_requis})"
                )
    
    def _generer_statistiques(
        self,
        enseignants: List[Enseignant],
        seances: Dict,
        affectations_vars: Dict
    ):
        """G√©n√®re des statistiques sur la solution trouv√©e"""
        
        self.infos.append("\nüìä === STATISTIQUES DE LA SOLUTION ===")
        
        # Charge par enseignant
        charges = {}
        for enseignant in enseignants:
            charge = sum([
                self.solver.Value(affectations_vars[(seance_key, enseignant.id)])
                for seance_key in seances.keys()
            ])
            charges[enseignant.id] = charge
        
        charge_min = min(charges.values()) if charges else 0
        charge_max = max(charges.values()) if charges else 0
        charge_moy = sum(charges.values()) / len(charges) if charges else 0
        
        self.infos.append(f"   ‚Ä¢ Charge minimale: {charge_min} s√©ances")
        self.infos.append(f"   ‚Ä¢ Charge maximale: {charge_max} s√©ances")
        self.infos.append(f"   ‚Ä¢ Charge moyenne: {charge_moy:.2f} s√©ances")
        self.infos.append(f"   ‚Ä¢ Dispersion: {charge_max - charge_min} s√©ances")
        
        # R√©partition par grade
        self.infos.append("\n   üìã R√©partition par grade:")
        grades_stats = {}
        
        for enseignant in enseignants:
            grade = enseignant.grade_code
            charge = charges[enseignant.id]
            
            if grade not in grades_stats:
                grades_stats[grade] = []
            grades_stats[grade].append(charge)
        
        for grade, charges_grade in sorted(grades_stats.items()):
            moy_grade = sum(charges_grade) / len(charges_grade)
            config = self.grade_configs.get(grade, {})
            quota_fixe = config.get('nb_surveillances', 'N/A')
            
            self.infos.append(
                f"      ‚Ä¢ {grade}: {len(charges_grade)} enseignants, "
                f"moyenne {moy_grade:.1f} s√©ances (quota fixe: {quota_fixe})"
            )
        
        # V√©rification du respect du quota fixe
        self.infos.append("\n   ‚öñÔ∏è V√©rification des quotas:")
        quotas_non_respectes = []
        
        for enseignant in enseignants:
            charge = charges[enseignant.id]
            config = self.grade_configs.get(enseignant.grade_code, {})
            quota_fixe = config.get('nb_surveillances', 0)
            
            if charge != quota_fixe:
                quotas_non_respectes.append(
                    f"‚ùå {enseignant.nom}: {charge} s√©ances (quota fixe={quota_fixe})"
                )
        
        if not quotas_non_respectes:
            self.infos.append("      ‚úÖ Tous les quotas fixes sont respect√©s")
        else:
            self.infos.append("      ‚ö†Ô∏è Quotas non respect√©s:")
            for msg in quotas_non_respectes:
                self.infos.append(f"         {msg}")
    
    def _calculer_scores_solution(
        self,
        affectations_vars: Dict,
        seances: Dict,
        enseignants: List[Enseignant],
        voeux: List[Voeu],
        charge_par_enseignant: Dict
    ):
        """Calcule les scores de qualit√© de la solution"""
        
        # Score 1: Respect des v≈ìux (100 = tous respect√©s)
        if voeux:
            voeux_respectes = 0
            voeux_violes = 0
            voeux_dict = self._construire_dict_voeux(voeux)
            
            for seance_key in seances.keys():
                date_exam, seance_code, semestre, session = seance_key
                jour = self._get_jour_from_date(date_exam)
                
                for enseignant in enseignants:
                    if self._a_voeu(enseignant.id, jour, seance_code, semestre, session, voeux_dict):
                        if self.solver.Value(affectations_vars[(seance_key, enseignant.id)]) == 0:
                            voeux_respectes += 1
                        else:
                            voeux_violes += 1
            
            total_voeux = voeux_respectes + voeux_violes
            self.score_components['respect_voeux'] = (voeux_respectes / total_voeux * 100) if total_voeux > 0 else 100
        else:
            self.score_components['respect_voeux'] = 100
        
        # Score 2: √âquilibre global (100 = dispersion minimale)
        charges = list(charge_par_enseignant.values())
        if charges:
            charge_min_val = min([self.solver.Value(c) for c in charges])
            charge_max_val = max([self.solver.Value(c) for c in charges])
            dispersion = charge_max_val - charge_min_val
            max_dispersion = len(seances)
            
            self.score_components['equilibre_global'] = max(0, 100 - (dispersion / max_dispersion * 100))
        else:
            self.score_components['equilibre_global'] = 100
        
        # Score 3: Quota fixe respect√© (100 = tous les quotas √©gaux respect√©s)
        quotas_ok = 0
        quotas_total = 0
        
        for enseignant in enseignants:
            config = self.grade_configs.get(enseignant.grade_code, {})
            quota_fixe = config.get('nb_surveillances', 0)
            charge = self.solver.Value(charge_par_enseignant[enseignant.id])
            
            quotas_total += 1
            if charge == quota_fixe:
                quotas_ok += 1
        
        self.score_components['quota_respecte'] = (quotas_ok / quotas_total * 100) if quotas_total > 0 else 100
        
        # Score global
        score_global = (
            self.score_components['respect_voeux'] * 0.3 +
            self.score_components['equilibre_global'] * 0.4 +
            self.score_components['quota_respecte'] * 0.3
        )
        
        self.score_components['score_global'] = score_global
        
        self.infos.append("\nüéØ === SCORES D'OPTIMISATION ===")
        self.infos.append(f"   ‚Ä¢ Respect des v≈ìux: {self.score_components['respect_voeux']:.1f}%")
        self.infos.append(f"   ‚Ä¢ √âquilibre global: {self.score_components['equilibre_global']:.1f}%")
        self.infos.append(f"   ‚Ä¢ Quotas respect√©s: {self.score_components['quota_respecte']:.1f}%")
        self.infos.append(f"   ‚Ä¢ SCORE GLOBAL: {score_global:.1f}%")
